<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：多媒体与杂项篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A24%2F</url>
    <content type="text"><![CDATA[本文将介绍如何在博客中添加多媒体内容，以及一些不太好归类的杂七杂八的小东西。 本地图片有时候我们想把自己设备上的图片传到博客上。这项工作需要借助第三方工具。 在根路径下打开Git Bash，执行 npm install hexo-asset-image –save 修改博客的配置文件，将post_asset_folder:设为true。 此后，每次新建博客的时候，都会在相同目录下新建一个同名文件夹。将图片放入此文件夹中，然后按照markdown语法引入图片即可。文件夹当然也可以手动创建。 1![文字说明](文件夹名/图片名.jpg) 如果不想这么麻烦，可以直接把图片塞到主题的source\images目录下。这样可以不用安装额外的包，但可能导致图片管理困难 管理起来也并不困难，继续创建子文件夹即可，分类很方便。比较麻烦的一点是，用本地编辑器的预览功能（如VS Code）预览博客文件时，无法看到图片，从而无法预知实际效果。此外，markdown语法的文字说明似乎不起作用。 引入图片时，使用绝对路径即可。甚至可以用HTML语法，如 1&lt;img src="/images/图片名.jpg"&gt; 在线多媒体（待补完） README文件（待补完） 关于Hexo建站的内容就先写这么多吧。如果发现更多好点子，我会继续补充。如有过时、疏漏或错误之处，还请发issue通知我，我看到了就会更改，谢谢支持！]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：个性化篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A23%2F</url>
    <content type="text"><![CDATA[本文介绍了NexT主题的一些个性化配置方法，可以使你的博客变得与众不同。主要参考资料为官方网站的文档。当然，很多东西都已经写在配置文件的注释里了，也可以自行探索。 NexT的页面是通过.swig格式的文件渲染的，其语法和前端静态页面几乎一致，做过WEB开发的读者应该都可以看懂。 永久链接更改博客的配置文件的permalink属性，即可修改文章的URL形式。 支持的修改类型与修改方法请参考Hexo的官方文档。 侧边栏设置最后在主题的配置文件中搜索social:，即可配置在侧边栏要显示的社交链接。其中，“||”之后的是fontawesome图标的名称。 同样，links:后可以配置相关链接。 1234567891011121314social: GitHub: https://github.com/mxdzs0612 || github #站点名称: 链接URL || 图标名称social_icons: enable: true #是否显示图标 icons_only: true #是否只显示图标，不显示站点名称 transition: truelinks_icon: linklinks_title: 友情链接links_layout: block#links_layout: inlinelinks: #Title: http://example.com 文末提示在路径\themes\next\layout\_macro中新建passage-end-tag.swig文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 中间的内容可按个人喜好修改，符合HTML语法即可。 打开同目录下的post.swig文件，搜索post-footer，在其所在标签上方增加 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 最后在主题的配置文件中的任意位置添加 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 这样，每篇文章的末尾处，都会自动打印所添加的内容。 网页底部内容在主题配置文件中搜索footer:属性，按个人喜好进行配置即可。 可进行控制的项目有： 网站从哪年起建立（显示为该年~今年） 所显示的图案及样式（依然是之前介绍过的fa图标，可设定其颜色以及是否为动态的） 版权所有者声明，默认与author相同 是否显示Hexo、NexT的链接及版本号 是否显示网址ICP备案号 这些内容都会显示在网页最底部。 标签样式在主题配置文件中搜索tag_icon，配置为true，即可把标签前的井号替换成图标。 如果对默认的图标不满意，可修改/themes/next/layout/_macro/路径下的post.swig文件，搜索footer class=&quot;post-footer&quot;，修改if theme.tag_icon下的图标即可。 代码风格在主题配置文件中搜索codeblock:，进行配置。 123456789101112codeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: night blue # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: false # Available values: default | flat | mac style: 对几种不同的风格的样子，可点进链接预览。 若将copy_button.enable设为true，可在代码块右侧开启复制按钮，点击即可复制代码。 Github横幅在主题配置文件中搜索github_banner:，设为true后，即可在站点右上角显示一个github图标。 permalink:后填写Banner要跳转的链接地址（如个人主页），title:填鼠标放上去时显示的提示语。 JavaScript动画在主题配置文件中搜索motion:，根据相关注释配置页面加载时的动画。具体每种动画是怎么实现的就只能一一尝试了。 然后还可开启动态背景，最常用的是Canvas Nest。将canvas_nest的enable设为true，表示开启。其余属性请自行探索。 修改pace:的效果则是会在页面顶部增添一个动态的加载条，显示页面加载的进度。 想要成功开启，还要引入相应的js文件。这里建议采用CDN，免去git clone的麻烦。搜索vendors:，根据注释中的Example引入所需的js文件即可。 动态标题栏在/themes/next/source/js/下新建文件crash_cheat.js`，接着把下列代码粘贴到clicklove.js文件中。（代码出处不详） 1234567891011121314151617&lt;!--崩溃欺骗--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = '╭(°A°`)╮ 页面崩溃啦 ~'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = '(ฅ&gt;ω&lt;*ฅ) 噫又好了~' + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125; &#125;); 最后，在\themes\next\layout\_layout.swig末尾添加 12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/crash_cheat.js"&gt;&lt;/script&gt; 这样，网站的标题会出现有意思的特效。具体内容可以自己修改。 点击出现心形效果在/themes/next/source/js/下新建文件clicklove.js，接着把下列代码粘贴到clicklove.js文件中。（代码出处不详） 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 最后，在\themes\next\layout\_layout.swig末尾添加 12&lt;!-- 页面点击出现小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; 搞定！ 首页文章阅读全文文章在首页全部展示实在太长了。在主题的配置文件中搜索auto_excerpt:，将enable改为true，即可只显示length中指定的字数，并在下方显示“阅读全文”按钮。对点开后的文章并不影响。 如果你希望手动控制在哪里显示阅读全文，NexT也是支持的。在文章中你想截断的位置增加&lt;!-- more --&gt;即可。官方推荐的也是这种方式。 如果scroll_to_more设置为true，点开“阅读全文”后，会直接滚动到原文中&lt;!-- more --&gt;下方，跳过了首页预览的那一部分。]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：主题篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A22%2F</url>
    <content type="text"><![CDATA[本文介绍了hexo最常见的主题，NexT主题的基本用法。 这一主题使用人数多，自由度高，可扩展性强，且美观简洁，是一款综合性能较好的主题。本博客也使用了NexT主题搭建。 本教程不会完全手把手教，需要读者有一定的自主学习能力，要能够在借助或不借助翻译软件或搜索引擎的情况下，看懂英文文档与注释。 注意，由于NexT在不断更新、演进，搜索引擎检索到的许多配置方法都已过时。过时主要表现为，本来需要一点一点手动加的功能都被NexT集成了，这对新用户很友好，老用户就只能泪流满面了。本文写于2019年7月底，NexT的版本大多为7.2.0，笔者无法保证本文中的信息今后不会过时、失效，请读者注意甄别。 安装 hexo的默认主题为landscape，可以在此页面中选择喜欢的主题。但是不管选哪个，都需要自己下载。这里就以NexT为例了。 我们当然可以选择去官方网站下载源码，但是更简单的方法是使用git。在博客的目录下打开控制台，输入 git clone https://github.com/theme-next/hexo-theme-next themes/next 即可将主题文件克隆到themes目录下的next文件夹中。 如果需要备份主题文件，此时应直接删去next文件夹下的.git文件夹，以防出现各种奇怪的问题。理论上使用–recursive参数也可以，但是会非常麻烦。 若不慎忘记删去就进行了备份，备份时会上传一个空的next文件夹，但是里面的所有文件都不会上传，文件夹在github上显示为黑色。此时，若还想备份，必须先删掉整个next文件夹，commit一次，然后再将克隆下来的、删去.git文件夹后的next主题文件夹重新复制过来，再次commit。（使用rm指令应该也可以） 如果还是出现了文件备份不全的情况，可以自行修改主题所在目录下的.gitignore文件。笔者的做法是直接把默认的landscape目录中的.gitignore复制过来，经多台设备测试，没有出现什么问题。 注意，之后若安装了插件，主题的配置文件中可能含有各种app的id等信息，会公开展示在分支中备份源代码内。虽然一般这些应用都会验证使用者的身份，其他人即使获取到密钥也无法使用这些插件，但还是可能有人对此感到介意，因此在这里进行提醒。不想公开的话，就只能不备份主题文件了。 基本配置主题自己也有一个配置文件，文件名也叫_config.yml。此文件位于/themes/next/_config.yml路径下，与hexo的配置文件互补。如果出现冲突，以hexo的配置为准。请读者注意区分下文的叙述中要修改的东西到底在哪个_config.yml文件中。 主题的切换首先要切换主题。在hexo的配置文件中，找到# Extensions注释，进行如下修改： 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 其中，填入的内容应与themes文件夹中存放主题的子文件夹名称相同。 选择语言然后切换语言。进入themes\next\languages\目录，选择想要的语言，以简体中文为例，复制其文件名称zh-CN。 修改hexo的配置文件中的# Site注释下的language条目，修改为对应语言的文件名，如zh-CN。不清楚具体位置的读者请参考上一篇博客的博客的基本配置部分。 值得注意的是，可能会有部分教程此处配置的是zh-hans。这种写法已经过时，请以languages目录下的文件名为准。 主题模板NexT主题共提供了四种风格，可以点击官方github中Live Preview标签下的页面进行预览。笔者对主题没有什么特别的偏好。但由于笔者是双子座，这里就选择了Gemini风格。 配置方法很简单。在NexT的配置文件中找到# Schemes注释，在下面的四种风格中去掉你要选的那种风格名称之前的“#”注释即可。如 12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 不进行设置时，默认选择的是第一个（Muse）。 现在默认主题已经变成了Gemini。不是很建议选择Mist主题，因为后续支持的内容可能比较少。 菜单栏在主题的配置文件中找到Menu关键字，进行设置。想要哪个就去掉哪个配置前面的“#”注释。 123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 例如：如果想给文章添加标签，应按如下步骤操作： 首先在博客根目录下，执行 hexo new page tags 此操作会在\source\tags路径下生成一个index.md文件，其内容为 123456---title: tagsdate: 2019-07-29 09:07:39type: "tags"comments: false--- 其中comments: false这行是自己加的，如果之后想要开启评论功能，这个页面应该是禁止评论的，建议设置。 最后去掉主题配置文件中menu.tags设置前的“#”注释即可。 要在写的文章中使用标签，只需在new出来的文章头部类似的位置添加tags: [标签1, 标签2]，标签即会自动归档，并显示在文章的末尾处。 同理可实现分类等功能。NexT默认提供的页面如下表。 键值 设定值 显示内容 home home: / 主页（默认开启） about about: /about 关于 tags tags: /tags 标签 categories categories: /categories 分类 archives archives: /archives 归档（默认开启） schedule schedule: /schedule/ 日程表 sitemap sitemap: /sitemap.xml 站点地图 commonweal commonweal: /404.html 404页 熟练掌握后，可以自己设定想在菜单栏中展示的页面。 设置头像在主题的配置文件中找到avatar关键字。 如果头像要使用在线地址，修改url的属性，内容填入图片的完整地址即可。如笔者使用自己的github头像，就可以这样配置： 12345678910# Sidebar Avataravatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: https://avatars2.githubusercontent.com/u/35512473 # If true, the avatar would be dispalyed in circle. rounded: false # If true, the avatar would be rotated with the cursor. rotated: false 如果要使用本地文件，则应将头像文件放在主题文件夹的themes\next\source\images路径下，然后修改url的属性为avatar: /images/avatar.png即可。 也可在source文件夹下新建upload目录，配置为avatar: /uploads/avatar.png。 其余选项的作用还请阅读注释或官方文档，自行探索。 设置网站图标网站图标就是显示在网页标签最左边的那个小图片。 先将图标文件复制到主题目录中的images文件夹下，然后在主题的配置文件中找到favicon关键字，按照提示修改为相对路径即可。 集成第三方功能NexT内部集成了大量第三方的工具。这里将挑选几个进行介绍。更多可用内容，请参考官方文档。 理论上也可以使用hexo的插件，进行下载。但是在NexT主题下，笔者的尝试全部失败全部木大了。如果读者知道该怎么做，欢迎发issue进行教学。 经尝试发现，凡是出现这种情况的，都是因为对应的插件的用法不是那么简单，不是那种安装了、enable设为true了就能用的，需要更多更复杂的配置；要不然就是版本或主题风格冲突了。一些比较简单的、集成程度较好的第三方服务可以成功开启。 阅读数量统计NexT集成的阅读数量统计工具非常多，这里就以最简单的不蒜子为例。 在主题的配置文件中搜索busuanzi_count，将下面的enable属性设为true即可。下面几条属性可自行设置。 total_visitors：总访问人数统计；total_views：总访问量统计。这两个值会显示在页面的最下面。 post_views：文章阅读量统计，会显示在文章的标题下方。 xxx_icon可设置这些访问量的示意图标，图标采用的是Font Awesome Icons，可自行替换成自己喜欢的。 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 不蒜子的缺点是统计不是很准（只多不少，很容易刷数据）。如想使用其它第三方统计工具，个人推荐LeanCloud。 近期改版后，LeanCloud需要上传身份证照片实名认证才能创建新应用，个人对此非常介意，因此不再推荐。不想用不蒜子的同学可以自行查找其他统计方法。 搜索功能在主题配置文件中搜索# Search Services注释，下面包含了NexT集成的两种配置方式。先来介绍第一种，即algolia_search。 首先进入Algolia官方网站，注册账号。可以直接使用你的github账号。 填写信息后（部分信息可跳过不填），点击页面上的粉红色按钮NEW INDEX，新建一个索引，起一个名字（后面会用到）。 来到API Keys页面，Application ID和Search-Only API Key都是后面要用的。 再来到All API Keys标签，点击Edit，在ACL选项中打开search、addObject、deleteObject、listIndexes、deleteIndex。 然后安装插件。在主题根目录下执行 npm install hexo-algoliasearch –save 然后在根目录的站点配置文件中，增添 12345algolia: applicationID: 'appId' apiKey: 'apiKey' indexName: 'indexName' chunkSize: 5000 将刚刚记录下来的值填进去。 但还没结束。下一步需要让Algolia记录你的文章数据。 在根目录下打开Git Bash，输入 export HEXO_ALGOLIA_INDEXING_KEY=Search-Only API key （注：若用cmd，要将export换成set，但此法可能会导致不可预知的错误，因此建议使用Git Bash） hexo algolia 顺利的话，Algolia后台的Indices下应该就能看到我们的博客的信息了。 最后添加页面上的入口及脚本。进入主题目录下，Git Bash输入 git clone https://github.com/theme-next/theme-next-algolia-instant-search source/lib/algolia-instant-search 在source/lib/目录下安装algolia-instant-search所需的文件。 最后，把主题配置文件中的algolia_search.enable，属性设为true，即可开启搜索功能。 更详细信息，可参考github上的文档。 本地搜索功能algolia免费用户策略改版后出现了一个缺点：不支持全文搜索。因此本站决定换用Local Search。个人也更推荐这种搜索方式。 首先在根目录打开Git Bash，运行 $ npm install hexo-generator-searchdb –save 在博客配置文件增添下列语句： 12345search: path: search.xml field: post format: html limit: 10000 最后在主题配置文件中搜索# Local search，将enable属性设为true即可。 12345678910111213# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 搜索功能的位置和algolia一样，也在菜单栏的最下面，并且支持全文搜索。此外，也可自己定制样式，非常好用。 这种方式就简单了很多，缺点是需要额外的一些安装包，换设备部署应重新安装。 此外，这种方法的原理是在本地生成一个包含索引的search.xml文件。感兴趣的读者可以点开看看其中有什么内容。随着文章数量增多，文件将越来越大，会占用不少空间。 评论本站原先使用了GITALK。这种方式的优点是配置简单，缺点是不支持无登陆评论。 GITALK是利用github API、基于Github issue开发的评论系统。 首先要去这里申请一个新app。四个位置依次填入app名称、博客地址https://xxxx.github.io、描述（任填）以及回调地址（仍然填博客地址）。点击绿色按钮创建。 完成后，记住app的信息，在主题配置文件中搜索# Gitalk，参照注释进行设置： 123456789101112131415##next/_config.yml # Gitalk # Demo: https://gitalk.github.io​ gitalk:​ enable: false # 设为true即可启用​ github_id: # Github repo owner，填入你的用户名​ repo: # Repository name to store issues，新建的用于保存评论数据的仓库名，填入博客的repo名即可，如xxxx.github.io`​ client_id: # Github Application Client ID，填入app信息​ client_secret: # Github Application Client Secret，填入app信息​ admin_user: # GitHub repo owner and collaborators, only these guys can initialize github issues​ distraction_free_mode: true # Facebook-like distraction free mode # Gitalk's display language depends on user's browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available value: en, es-ES, fr, ru, zh-CN, zh-TW​ language: 这样就完成了。 使用时，需要登录github账号才能评论，评论呈现在页面最下方。每篇文章都要进行初始化，建立一个原始的issue，才能增添新的评论。而只有在admin_user中配置了用户名的用户可以开启某篇文章的评论功能，较为麻烦。因此笔者在考虑更换评论系统，本站的评论功能暂时关闭。 更换已完成，请见下文。 如果之前注册了LeanCloud，使用LeanCloud提供的评论插件Valine是一个非常不错的选择。这是少有的支持无登陆评论的插件。免费版虽有诸多限制，但也足够使用，推荐不介意上传自己手持身份证照片的读者采用Valine，具体教程还请参考官方文档。 utterances评论NexT 7.3.0 + 版本集成了utterances评论。这一工具原理和GITALK类似，但是索取的权限少，并且不用指定某个人来初始化，因此好用得多，推荐给大家。 首先来这里为utterances在github上授权。只有这样，才能让utterances有资格访问你的issue。还可指定utterances能够访问的仓库，可见其权限控制做的非常好。 授权完毕后，来到博客根目录，打开Git Bash，执行 npm install –save github:theme-next/hexo-next-utteranc 然后在任意配置文件中（建议在主题配置文件中）新建如下配置 12345678# Demo: https://utteranc.es/ http://trumandu.github.io/about/utteranc: enable: true repo: #Github repo such as :TrumanDu/comments pathname: pathname # theme: github-light,github-dark,github-dark-orange theme: github-light cdn: https://utteranc.es/client.js 其中，repo下填写你想把哪个仓库的issue当作评论的位置，如xxxx/xxxx.github.io。其它选项按注释设置即可。 重新生成博客，在每篇文章的最下方即会出现utterances评论。登录github账号，任何人可以新建评论，初始化工作将由utterances机器人完成，非常方便。 缺点也有一些，那就是目前界面都是英文的。不过这无伤大雅。当然，如果读者知道怎么解决，烦请告诉我。 如果出现跳转错误的问题（如登录后跳转到https://yoursite.com/），请在博客的配置文件中搜索`# URL，将url: 配置为/`或你的站点的URL地址。 字数统计首先在根目录运行Git Bash，执行 npm install hexo-symbols-count-time –save 然后在博客的配置文件中新增配置 123456symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false 最后，在主题的配置文件中搜索symbols_count_time:，进行如下修改 12345678# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: true awl: 2 wpm: 300 上述设置是官方文档对中文博客的推荐设置，当然也可以自定义为合适的值。 这样，在每篇文章的标题下，会显示文章的字数与预计所需阅读时间。 如果item_text_total设置为true，在页面最下方还会显示站点总字数与站点阅读总时长的估计值。]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：基础篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本文记录在github上搭建hexo博客的过程，其中包含了一些实用的小技巧，能够让新手少踩一些坑。 关于hexo的简介，可以参考官方文档。 123操作系统： Windows 10 1903专业版编辑器： VS Code &amp; Notepad++浏览器： Chrome 环境准备首先需要安装、配置好git。 安装node.js。 然后注册github账号。git的配置中，用户名和邮箱应与github相同。 具体安装过程还请自行探索或在搜索引擎中检索，此处从略。 然后配置ssh密钥。在控制台输入 ssh-keygen -t rsa -C “github的注册邮箱” 一路回车，得到信息，密钥会被保存在系统盘用户目录下的.ssh文件夹中。 找到id_rsa.pub文件并用文本编辑器（如Notepad++）打开，复制里面的内容。注意此处有两个文件，其中id_rsa文件中保存的是私钥，是只能自己看的，而.pub结尾的文件中的公钥是可以上传的，不要点错了。 进入github的ssh配置页面，点击New SSH key，将刚才复制的公钥的值粘贴到Key一栏中。title可任填，如blog。完毕后点击绿色按钮保存。 创建仓库在github的右上角点击Create a new repository。 在Repository name中填入你的用户名.github.io，如mxdzs0612.github.io即为本博客的仓库名。这同时也是博客的域名。在下文中，将用“xxxx”代替用户名。 其它选项任填，完毕后点击绿色按钮创建。 准备分支为了能够在多台设备上维护博客，同时对博客源文件在github上进行备份，这里建议直接新建分支。如果不想备份，可以忽略相关内容。 点击仓库左上角的Branch标签，默认值为master。在这里新建hexo分支，并将其设置为主要（默认）分支。 后续过程中，master分支用于存放博客的静态页面，而hexo分支用于存放源文件。分支名可任取。 在本地某个文件夹下打开Git Bash，用SSH方式克隆仓库。指令为 git clone git@github.com:xxxx/xxxx.github.io.git 这一步的目的是获取远程仓库自动生成的.git文件夹及其中的配置内容。 安装hexo进入刚克隆的xxxx.github.io文件夹，在空白处点击右键打开Git Bash，依次执行以下指令： npm install hexo hexo init npm install npm install hexo-deployer-git Bash中，当前分支应显示为hexo。 此时，hexo的安装应该已完成。 Windows系统不建议在cmd中安装hexo，因为这样会直接安装到系统盘个人目录下的某个文件夹中，控制台会出现各种找不到指令的问题，严重影响使用。 博客的基本配置打开目录下的_config.yml文件，继续修改其中的内容。请注意，yaml语法中，冒号后面需要空一格，再键入内容。 基本的配置在# Site下，即 123456title: 这是一个博客 # 网站标题subtitle: 这是一个副标题 # 副标题description: 试着搭个博客 # 网页描述，类似座右铭，一般会显示在author附近author: mxdzs0612 # 站长信息language: zh-CN # 网站语言，部分主题的默认语言是英文，建议修改timezone: Asia/Shanghai # 网站时区，默认使用电脑的时区 然后比较重要的是# Deployment下的部署信息，即 1234deploy: type: git repo: https://github.com/xxxx/xxxx.github.io.git branch: master 请务必将_config.yml中的deploy下branch参数的值修改为master，这样编译好的静态文件将被上传到master分支。 完成部署博客的部署先来部署网站。Shift+右键点击文件夹的空白位置，打开控制台，依次执行 hexo generate hexo server 在浏览器输入 http://localhost:4000/ ，可以在本地预览博客的效果。其中预置了一个hello-world.md文件，因此会有一篇默认博客。 如果需要新建文章，输入 hexo new “文章名” 在xxxx.github.io\source\_posts\路径下找到该文章，用markdown编辑器进行编辑。推荐使用VS Code或Typora。 请注意，不要随便删除new出来的.md文件中自带的内容。将来文章的标题、标签、分类等许多内容都需要在这里进行设置。如title:属性后面就是文章的标题，默认与文件名相同，可进行修改（并不一定要和文件名相同）。 保存，依次执行下列操作 hexo clean clean操作的目的是清除缓存（上一次generate生成的静态文件等），这一步不是必须的，但是如果网站显示出现异常或不符合预期之处，可尝试此操作。 hexo generate hexo deploy 如果是第一次执行此过程，中段会跳出github登录提示，用自己的账户登录即可。 这时访问 xxxx.github.io ，即可看到文章已发布。如果没有变化，请等待几秒钟（十秒左右），然后强制清除缓存并刷新页面（Chrome浏览器的快捷键为Ctrl+Shift+R）。如果对文章进行进行了修改，通常也需强制刷新、清除缓存后才能看到效果。 后两步操作可合并、简写成一步，即 hexo g -d 备份源代码不要忘记将源文件也上传到github。在Git Bash中依次执行 git add . 添加文件到本地缓冲区 git commit –m “add branch” 确认修改并上传到本地版本控制库中。引号中的内容可任填，填入的内容会用作提交的commit message，显示在github code列表中文件名的右侧。 git push 推送到远程仓库。如此即可将源代码上传至hexo分支。 日常使用时，建议的执行顺序为先备份源代码，再部署。虽然一般不会出现什么问题，但万一突然断网甚至系统崩溃、文件丢失，交换顺序可能就会导致源码丢失。 已有博客的备份如果之前已经创建并上传好了博客，但没有备份源码，备份的操作与之前几乎相同。唯一的区别是，建立分支之后的branch中已经有内容了，此时的内容是部署的文件而非源码。 因此，clone之后，只需将clone下来的文件中除.git文件夹以外的文件全部删掉，将原来写的博客的源文件整体复制过来即可。 注意，复制过来的源文件中应该包含一个.gitignore文件，如果没有需要手动创建，内容为 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 如果之前安装过主题，也应该将themes文件夹中对应主题目录下的.git文件夹删掉，防止主题文件上传不上去。这会导致主题的配置在其它设备上无法使用。 之后再按照上文中的步骤将源文件push到github上。这样，源文件就会覆盖掉分支中的文件，从而实现备份。 新设备上的操作安装过程与之前一样，只需省略初始化（init）的步骤即可。 配置好环境后，首先克隆仓库。在任意文件夹下打开Git Bash，输入 git clone git@github.com:xxxx/xxxx.github.io.git 注意，默认分支仍应为hexo。如已修改，需使用下列语句克隆对应分支： git clone -b hexo git@github.com:xxxx/xxxx.github.io.git 进入刚拷贝的xxxx.github.io文件夹，通过Git Bash依次执行 npm install hexo npm install npm install hexo-deployer-git 切记不要执行hexo init，否则之前写好的东西就都没了。 这样就在新的设备上也安装好了hexo。此后的修改配置部署操作就都如常了。请参考上文，自行操作。 当然，如果额外安装过hexo插件，就只能找个地方记住自己装了哪些东西，然后在新设备上再装一遍。否则可能出现在另一台设备上生成的博客缺少东西的情况。 注意，如果在其它设备修改过文件，在新设备上进行操作之前，要先使用下述指令 git pull 将本地仓库与远程仓库同步（下载+合并版本）。否则可能出现版本冲突、无法push的情况，造成不必要的麻烦。。 总结发布新文章的步骤如下：在控制台输入 hexo n “文章名” 编辑完毕后， hexo clean hexo g -d 若要备份源代码，只需 git add . git commit -m “xxx” git push 以上操作均可在控制台中完成，不必切换到Git Bash。 笔者为懒人提供了两个批处理脚本，这样就不必手打命令了。 同步源文件到github.bat 123456set /p commit_log=请输入 commit 日志信息:git statusgit add .git commit -m "%commit_log%"git pushpause 发布文章到github.bat 12@echo offhexo clean&amp;&amp;hexo g&amp;&amp;hexo d]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
