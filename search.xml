<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安装、配置WSL并在其中安装Docker</title>
    <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2019-10-09-DockerOnWSL.html</url>
    <content><![CDATA[<p>本文总结了使用WSL（Windows Subsystem for Linux，即Windows系统自带的Linux子系统）安装Docker的方法。</p>
<a id="more"></a>

<p>使用WSL的优点是无需双系统，启动快，更加流畅，切换方便，剪贴板和文件均可共享，十分易用，适合入门。缺点是Linux只有终端，没有桌面环境，资源利用率低，且可能会出现一些奇奇怪怪的问题。</p>
<p>读者最好要先熟悉Linux的基本操作，尤其是能够初步上手vim，至少要能够对着快捷键参照表使用vim编辑器进行基本的键入、复制、粘贴、撤销等操作。</p>
<p>本文部分内容参考了<a href="https://zhuanlan.zhihu.com/p/61542198" target="_blank" rel="noopener">知乎</a>的文章，在此声明。</p>
<p>本文有部分内容是笔者踩完坑后凭印象写的，可能会有疏漏、前后颠倒、逻辑顺序错误等情况，如果读者发现哪里不对，还望发评论提醒一下，笔者会立即修改。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作系统： Windows 10 1903 专业版 64位 版本18362</span><br></pre></td></tr></table></figure>
<p>注意家庭版是不行的。一些学校会提供正版的专业版Windows 10，没有的话还请自寻办法。</p>
<p>首先要开启window功能。</p>
<blockquote>
<p>设置&gt;应用&gt;程序和功能&gt;启用或关闭window功能</p>
</blockquote>
<p>勾选“适用于Linux的Windows子系统”前的方框。</p>
<p>然后在“管理可选功能”中添加“OpenSSH客户端”。如果不想在Windows终端中操作WSL，这一步可以省略不做。</p>
<h2 id="安装WSL系统"><a href="#安装WSL系统" class="headerlink" title="安装WSL系统"></a>安装WSL系统</h2><p>打开<code>Microsoft Store</code>，在搜索框输入<code>WSL</code>，挑选你喜欢的Linux子系统。目前并没有几种可用的选择，这里就以Ubuntu 18.04 LTS为例。点击获取，等待下载完毕。</p>
<p>之后可能会要求重启电脑。</p>
<p>装好的系统会像应用一样出现在开始菜单中。点击打开系统，等待一段时间，系统会自动进行初始化。初始化过程中会要求设置用户名和密码，个人电脑建议不要设置得太过复杂，以免在之后频繁输入的过程中造成不必要的麻烦。</p>
<p>可输入以下指令查看基本信息，检查安装的效果。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看linux内核版本</span></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统版本</span></span><br><span class="line">cat /etc/lsb-release</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看本地磁盘内存情况（可见C盘、D盘）</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure>
<p>默认的安装位置为：<code>C:\Users\你的用户名 \AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_xxxxxxxxxxxxx\</code>。此目录中，<code>LocalState\rootfs\</code>文件夹下即为Ubuntu的根目录。熟悉Ubuntu的同学应该很容易通过其中的文件结构辨认出来。</p>
<h2 id="配置WSL系统"><a href="#配置WSL系统" class="headerlink" title="配置WSL系统"></a>配置WSL系统</h2><p>强烈建议将软件源更换为国内源，因为在国内使用官方源下载的速度实在过于感人。推荐阿里源和中科大源，具体内容可以很容易搜索到。这里以阿里源为例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用root权限登录，然后输入密码</span></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">接下来备份当前源，输入以下命令</span></span><br><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.old </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这个sources.list文件就是源文件，删除该文件，重新写一个</span></span><br><span class="line">rm /etc/apt/sources.list</span><br><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>此时会进入vim编辑器。将下面的内容复制进文件中即可。<br>输入<code>i</code>进入编辑模式，按右键粘贴或不进入编辑模式，输入<code>p</code>进行粘贴。然后按<code>ESC</code>退出编辑模式，输入<code>:wq</code>回车，保存并退出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu xenial main restricted #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu xenial partner</span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu xenial partner</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security universe</span><br><span class="line">deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu bionic stable</span><br><span class="line"># deb-src [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu bionic stable</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security multiverse</span><br></pre></td></tr></table></figure>
<p>下面更新镜像源和软件包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update      #更新软件源</span><br><span class="line">sudo apt upgrade     #更新软件包</span><br></pre></td></tr></table></figure>

<h2 id="美化vim"><a href="#美化vim" class="headerlink" title="美化vim"></a>美化vim</h2><p>vim的默认情况下完全没法看，字体和背景都是深色，屏幕亮度不高时什么都看不清。建议更换主题。这里采用molokai配色。参考<a href="https://blog.csdn.net/zycdsg/article/details/79057698" target="_blank" rel="noopener">此文</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir .vim</span><br><span class="line">cd .vim</span><br><span class="line">git clone https://github.com/tomasr/molokai.git</span><br><span class="line">cp -rf molokai/colors/ ./colors</span><br><span class="line">vim vimrc</span><br><span class="line">colorscheme molokai</span><br></pre></td></tr></table></figure>

<h2 id="使用Windows控制台登录WSL"><a href="#使用Windows控制台登录WSL" class="headerlink" title="使用Windows控制台登录WSL"></a>使用Windows控制台登录WSL</h2><p>可以通过SSH方法，使用终端登录WSL。这里使用的是<code>Windows Terminal</code>，1903版系统可以在<code>Microsoft Store</code>中获取。其实用自带的PowerShell也行，右击左下角开始菜单打开即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置root用户的口令（密码），用作后续登陆使用</span></span><br><span class="line">sudo passwd root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装openssh-server（Ubuntu自带，可省）</span></span><br><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">备份很重要</span></span><br><span class="line">sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用vim进行编辑，按i进入insert模式</span></span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>在vim中分别找到并对应修改四处，修改后ESC，输入wq保存退出，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Port &#x3D; 8022</span><br><span class="line">#ListenAddress 0.0.0.0        # 如果需要指定监听的IP则去除最左侧的井号，并配置对应IP，默认即监听PC所有IP。可不修改，保留井号。</span><br><span class="line">PermitRootLogin yes           # 如果你需要用root直接登录系统则此处改为yes，在WSL中可能会不太好使，后文有解决办法。</span><br><span class="line">PasswordAuthentication yes    # 将no改为yes表示使用帐号密码方式登录</span><br></pre></td></tr></table></figure>
<p>之后启动SSH并检查状态，输出<code>sshd is running</code>的信息即说明配置正确。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service ssh start             #启动SSH服务</span><br><span class="line">sudo service ssh status            #检查状态</span><br><span class="line">sudo systemctl enable ssh          #开机自动启动ssh命令，有时可能不好使</span><br></pre></td></tr></table></figure>
<p>下一步需要配置ssh密钥。执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span><br><span class="line">sudo ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">sudo ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key</span><br></pre></td></tr></table></figure>
<p>然后可尝试使用SSH登录。在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh  root@127.0.0.1 -p 8022</span><br></pre></td></tr></table></figure>
<p>键入密码，即可登录。</p>
<p>如果遇到root用户的密码明明正确，却不断提示重试，且<code>PermitRootLogin</code>已开启，就只能通过下面这种方式登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh  你的用户名@127.0.0.1 -p 8022</span><br></pre></td></tr></table></figure>
<p>输入密码后，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>
<p>再次输入密码，也可达到同样的登录root用户的效果。</p>
<p>或者用这条语句，输入root用户的密码也可以。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su -</span><br></pre></td></tr></table></figure>
<p>这样，只要ssh服务是开启的，就可以通过这种方式在Windows系统的控制台控制WSL。如果没开启，使用以下指令即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>
<p>如果你的电脑不经常关机，重启的频率不算高，用支持多标签等功能的Windows Terminal来操作会很方便。</p>
<p>理论上在控制台使用<code>bash</code>命令直接切换到WSL环境应该也是可以的，然后输入<code>cd</code>，此时WSL会跳转到<code>/home/用户名</code>目录下，其实也等同于通过SSH的方法连接WSL，很方便。</p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>按照<a href="https://blog.jayway.com/2017/04/19/running-docker-on-bash-on-windows/" target="_blank" rel="noopener">如下指令</a>安装即可。执行第一行时如果报警，可不必理会。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Install packages to allow apt to use a repository over HTTPS</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Add Docker<span class="string">'s official GPG key</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set up the repository</span></span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Update <span class="built_in">source</span> lists</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> Install Docker</span></span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>
<p>能正确显示版本号就是安装成功了。理论上我们就可以在WSL中愉快地使用Docker了。但实际操作过程中笔者发现通过这种方法安装的docker是使用不了的，因此还是建议安装Windows Desktop客户端，然后修改WSL中<code>.docker</code>路径下的配置信息来使用。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WSL</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo在github上搭建博客：升级篇</title>
    <url>/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/2019-10-08-HexoBlog5.html</url>
    <content><![CDATA[<p>本文记录了升级hexo以及NexT版本的过程中遇到的各种问题。</p>
<a id="more"></a>
<p>Hexo通常半年一更，更新时间并不稳定，版本之间变化通常都不小，可能会导致兼容性问题。建议在本地仔细测试后再升级。更新日志在<a href="https://hexo.io/news/" target="_blank" rel="noopener">官网新闻页</a>。</p>
<p>NexT主题通常会在每个月的1号更新一个版本，在官方网站的<a href="https://theme-next.org/" target="_blank" rel="noopener">首页</a>会贴出详细的更新日志，可进行查看，判断自己是否需要进行更新。没有必要每个月都准时进行更新，只要博客的版本稳定可用就行了。</p>
<h2 id="笨方法升级NexT"><a href="#笨方法升级NexT" class="headerlink" title="笨方法升级NexT"></a>笨方法升级NexT</h2><p>我使用的是最笨的更新方法，即手动合并配置。注意，此法需要在之前备份时保留主题文件夹下的<code>.git</code>文件夹。我采用的办法是将这个文件夹改个名，然后丢到<code>.gitignore</code>文件里去。想要更新主题的时候再改回来。</p>
<p>在<strong>主题文件夹中</strong>打开控制台，执行</p>
<blockquote>
<p>git pull </p>
</blockquote>
<p>此时肯定有一大堆冲突，尤其是主题配置文件，一定会冲突。</p>
<p>把冲突的文件一一剪切出来，然后再次执行</p>
<blockquote>
<p>git pull </p>
</blockquote>
<p>这样，更新就完成了。</p>
<p>接下来需要还原我们之前进行的配置。使用VS Code的“选择以进行比较”功能（需打开侧边栏），比较clone下来的文件和我们之前剪切走的文件，查看新文件与旧文件在哪些地方出现了改变。手动将这些配置一一复制回去即可。</p>
<p>通常，小版本的更新改变都不会特别大，一般就是多了几个功能、修了几个bug什么的，因此工作量不算太大，十来分钟就能完成，还可以顺便了解一下新增了哪些有趣的功能。因此笔者仍在采用笨方法。主题配置文件中配置项的位置可能会发生变化，本来在前面的配置可能突然跑到后面去了，因此不要无脑复制，要多多留意。</p>
<p>版本更新后，之前做的一些配置可能会失效，也可能会被集成到一起，详细内容还要参考官方网站了。如果用不到更新的新特性的话，个人不建议频繁更新。如果某个第三方模块在更新后失效，最好的办法就是卸载重装。如果还不行就只能等作者适配了……</p>
<h2 id="数据文件法升级NexT"><a href="#数据文件法升级NexT" class="headerlink" title="数据文件法升级NexT"></a>数据文件法升级NexT</h2><p>利用Hexo的数据文件特性，似乎可以较容易地更新主题。不过个人感觉此方法会把博客的配置搞的乱七八糟的，也并没省多少事，因此未进行过尝试。如果读者觉得这种方法很方便，可以教教我~</p>
<p>感兴趣的同学可以自行参考<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md" target="_blank" rel="noopener">官方文档</a>。</p>
<h2 id="升级hexo"><a href="#升级hexo" class="headerlink" title="升级hexo"></a>升级hexo</h2><p>近日hexo发布了4.0.0版本，我尝试进行了更新，发现较为容易。</p>
<p>修改博客根目录下的<code>package.json</code>文件，将</p>
<blockquote>
<p>“hexo”: “^3.9.0”,</p>
</blockquote>
<p>改为</p>
<blockquote>
<p>“hexo”: “^4.0.0”,</p>
</blockquote>
<p>然后右键打开Git Bash，执行</p>
<blockquote>
<p>npm install</p>
</blockquote>
<p>即可。再次generate，即可发现hexo版本已升级至4.0.0。</p>
]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub上的一些不错的Java学习资源</title>
    <url>/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2019-08-11-LearnJavaOnGithub.html</url>
    <content><![CDATA[<p>这里总结一下在GitHub上看到的比较好的Java学习资料，其中大部分都是中文的。</p>
<p>这份资料主要是方便自己看的。不过，如果有读者不小心读到本文并且感觉对自己有帮助的话，还望去右上角给我点个star鼓励我。</p>
<a id="more"></a>

<h2 id="完全总结篇"><a href="#完全总结篇" class="headerlink" title="完全总结篇"></a>完全总结篇</h2><p>Java学习+面试指南： <a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide</a></p>
<p>Cyc Tech Interview Guide： <a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes</a></p>
<p>3y： <a href="https://github.com/ZhongFuCheng3y/3y" target="_blank" rel="noopener">https://github.com/ZhongFuCheng3y/3y</a></p>
<p>互联网一线大厂面试+学习指南： <a href="https://github.com/AobingJava/JavaFamily" target="_blank" rel="noopener">https://github.com/AobingJava/JavaFamily</a></p>
<p>Java工程师成神之路： <a href="https://github.com/hollischuang/toBeTopJavaer" target="_blank" rel="noopener">https://github.com/hollischuang/toBeTopJavaer</a></p>
<p>后端架构师技术图谱： <a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener">https://github.com/xingshaocheng/architect-awesome</a></p>
<p>互联网Java工程师进阶知识完全扫盲： <a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener">https://github.com/doocs/advanced-java</a></p>
<p>处于萌芽阶段的 Java 核心知识库： <a href="https://github.com/crossoverJie/JCSprout" target="_blank" rel="noopener">https://github.com/crossoverJie/JCSprout</a></p>
<p>汇总java生态圈技术心得： <a href="https://github.com/aalansehaiyang/technology-talk" target="_blank" rel="noopener">https://github.com/aalansehaiyang/technology-talk</a></p>
<p>面试总结×2： <a href="https://github.com/gzc426/Java-Interview" target="_blank" rel="noopener">https://github.com/gzc426/Java-Interview</a> &amp;&amp; <a href="https://github.com/xbox1994/Java-Interview" target="_blank" rel="noopener">https://github.com/xbox1994/Java-Interview</a> </p>
<h2 id="知识体系篇"><a href="#知识体系篇" class="headerlink" title="知识体系篇"></a>知识体系篇</h2><p>All Algorithms implemented in Java (英文)： <a href="https://github.com/TheAlgorithms/Java" target="_blank" rel="noopener">https://github.com/TheAlgorithms/Java</a></p>
<p>Design patterns implemented in Java (英文)： <a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener">https://github.com/iluwatar/java-design-patterns</a></p>
<p>用动画的形式呈现解LeetCode题目的思路： <a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">https://github.com/MisterBooo/LeetCodeAnimation</a></p>
<p>Java LeetCode题解： <a href="https://github.com/wind-liang/leetcode" target="_blank" rel="noopener">https://github.com/wind-liang/leetcode</a></p>
<p>手把手撕LeetCode题目（Python）： <a href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener">https://github.com/labuladong/fucking-algorithm</a></p>
<p>系统设计入门： <a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener">https://github.com/donnemartin/system-design-primer</a></p>
<p>Java程序员眼中的Linux： <a href="https://github.com/judasn/Linux-Tutorial" target="_blank" rel="noopener">https://github.com/judasn/Linux-Tutorial</a></p>
<h2 id="框架使用篇"><a href="#框架使用篇" class="headerlink" title="框架使用篇"></a>框架使用篇</h2><p>Spring Boot系列实战合集:  <a href="https://github.com/hansonwang99/Spring-Boot-In-Action" target="_blank" rel="noopener">https://github.com/hansonwang99/Spring-Boot-In-Action</a></p>
<p>循序渐进，学习Spring Boot： <a href="https://github.com/wuyouzhuguli/SpringAll" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll</a></p>
<p>Spring Boot教程、技术栈示例代码，快速简单上手教程： <a href="https://github.com/ityouknow/spring-boot-examples" target="_blank" rel="noopener">https://github.com/ityouknow/spring-boot-examples</a></p>
<p>spring boot demo： <a href="https://github.com/xkcoding/spring-boot-demo" target="_blank" rel="noopener">https://github.com/xkcoding/spring-boot-demo</a></p>
<h2 id="框架增强篇"><a href="#框架增强篇" class="headerlink" title="框架增强篇"></a>框架增强篇</h2><p>hope-boot脚手架： <a href="https://github.com/hope-for/hope-boot" target="_blank" rel="noopener">https://github.com/hope-for/hope-boot</a></p>
<p>JHipster： <a href="https://github.com/jhipster/generator-jhipster" target="_blank" rel="noopener">https://github.com/jhipster/generator-jhipster</a></p>
<p>Spring-Boot-Plus： <a href="https://github.com/geekidea/spring-boot-plus" target="_blank" rel="noopener">https://github.com/geekidea/spring-boot-plus</a></p>
<h2 id="开源项目篇"><a href="#开源项目篇" class="headerlink" title="开源项目篇"></a>开源项目篇</h2><p>电商系统： <a href="https://github.com/macrozheng/mall" target="_blank" rel="noopener">https://github.com/macrozheng/mall</a></p>
<p>秒杀系统： <a href="https://github.com/qiurunze123/miaosha" target="_blank" rel="noopener">https://github.com/qiurunze123/miaosha</a></p>
<p>微人事： <a href="https://github.com/lenve/vhr" target="_blank" rel="noopener">https://github.com/lenve/vhr</a></p>
<p>V部落博客管理平台： <a href="https://github.com/lenve/VBlog" target="_blank" rel="noopener">https://github.com/lenve/VBlog</a></p>
<p>halo 一款现代化的个人独立博客系统： <a href="https://github.com/halo-dev/halo" target="_blank" rel="noopener">https://github.com/halo-dev/halo</a></p>
<p>后台管理系统： <a href="https://github.com/elunez/eladmin" target="_blank" rel="noopener">https://github.com/elunez/eladmin</a></p>
<p>Spring Cloud电商平台： <a href="https://github.com/paascloud/paascloud-master" target="_blank" rel="noopener">https://github.com/paascloud/paascloud-master</a></p>
<h2 id="面试指南篇"><a href="#面试指南篇" class="headerlink" title="面试指南篇"></a>面试指南篇</h2><p>2019年最新总结，阿里，腾讯，百度，美团，头条等技术面试题目，以及答案，专家出题人分析汇总: <a href="https://github.com/0voice/interview_internal_reference" target="_blank" rel="noopener">https://github.com/0voice/interview_internal_reference</a></p>
<p>Coding Interview University (英文)： <a href="https://github.com/jwasham/coding-interview-university" target="_blank" rel="noopener">https://github.com/jwasham/coding-interview-university</a></p>
<p>Everything you need to know to get the job： <a href="https://github.com/kdn251/interviews" target="_blank" rel="noopener">https://github.com/kdn251/interviews</a></p>
<p>Materials to help you rock your next coding interview（英文）： <a href="https://github.com/yangshun/tech-interview-handbook" target="_blank" rel="noopener">https://github.com/yangshun/tech-interview-handbook</a></p>
<h2 id="读书充电篇"><a href="#读书充电篇" class="headerlink" title="读书充电篇"></a>读书充电篇</h2><p>Java开发者技术书籍大全： <a href="https://github.com/sorenduan/awesome-java-books" target="_blank" rel="noopener">https://github.com/sorenduan/awesome-java-books</a></p>
<p>编程之法（已停更）： <a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="noopener">https://github.com/julycoding/The-Art-Of-Programming-By-July</a></p>
<p>On Java 8（翻译中）：<a href="https://github.com/LingCoder/OnJava8" target="_blank" rel="noopener">https://github.com/LingCoder/OnJava8</a></p>
<p>effective-java-3rd-chinese： <a href="https://github.com/sjsdfg/effective-java-3rd-chinese" target="_blank" rel="noopener">https://github.com/sjsdfg/effective-java-3rd-chinese</a></p>
<p>Freely available programming books（各种语言，含中文）： <a href="https://github.com/EbookFoundation/free-programming-books" target="_blank" rel="noopener">https://github.com/EbookFoundation/free-programming-books</a></p>
<p>Documentations, books, courses, git repositories and so on（书单，不含资源）： <a href="https://github.com/tagnja/resources-of-learning" target="_blank" rel="noopener">https://github.com/tagnja/resources-of-learning</a></p>
<h2 id="开发工具篇"><a href="#开发工具篇" class="headerlink" title="开发工具篇"></a>开发工具篇</h2><p>lombok： <a href="https://github.com/rzwitserloot/lombok" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok</a></p>
<p>WxJava（微信开发 Java SDK）: <a href="https://github.com/Wechat-Group/WxJava" target="_blank" rel="noopener">https://github.com/Wechat-Group/WxJava</a></p>
<p>史上最全的整合第三方登录的开源库： <a href="https://github.com/justauth/JustAuth" target="_blank" rel="noopener">https://github.com/justauth/JustAuth</a></p>
<p>Hutool： <a href="https://github.com/looly/hutool" target="_blank" rel="noopener">https://github.com/looly/hutool</a></p>
<p>Swagger： <a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">https://github.com/swagger-api/swagger-ui</a></p>
<p>JWT登录支持： <a href="https://github.com/jwtk/jjwt" target="_blank" rel="noopener">https://github.com/jwtk/jjwt</a></p>
<h2 id="其它类型篇"><a href="#其它类型篇" class="headerlink" title="其它类型篇"></a>其它类型篇</h2><p>互联网公司技术架构： <a href="https://github.com/davideuler/architecture.of.internet-product" target="_blank" rel="noopener">https://github.com/davideuler/architecture.of.internet-product</a></p>
<p>大牛企业内部pdf与PPT： <a href="https://github.com/0voice/from_coder_to_expert" target="_blank" rel="noopener">https://github.com/0voice/from_coder_to_expert</a></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo在github上搭建博客：多媒体与杂项篇</title>
    <url>/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/2019-08-01-HexoBlog4.html</url>
    <content><![CDATA[<p>本文将介绍如何在博客中添加多媒体内容，以及一些不太好归类的杂七杂八的小东西。</p>
<a id="more"></a>

<h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><p>有时候我们想把自己设备上的图片传到博客上。</p>
<p>第一种方法需要借助第三方工具。在根路径下打开Git Bash，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>修改博客的配置文件，将<code>post_asset_folder:</code>设为true。</p>
<p>此后，每次新建博客的时候，都会在相同目录下新建一个同名文件夹。将图片放入此文件夹中，然后按照markdown语法引入图片即可。文件夹当然也可以手动创建。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">文字说明</span>](<span class="link">文件夹名/图片名.jpg</span>)</span><br></pre></td></tr></table></figure>
<p>如果不想这么麻烦，可以用第二种方法：直接把图片塞到主题的<code>source\images</code>目录下。这样可以不用安装额外的包，<del>但可能导致图片管理困难</del> 管理起来也并不困难，继续创建子文件夹即可，分类很方便。因此个人建议不要安装前面那个包，采用这种方法人工管理。比较麻烦的一点是，用本地编辑器的预览功能（如VS Code的Ctrl+K V）预览博客文件时，无法看到图片，从而无法预知实际效果。只能执行hexo s打开本地hexo服务器进行预览。</p>
<p>引入图片时，使用绝对路径即可。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">文字说明</span>](<span class="link">/images/图片名.gif</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/images/%E8%A1%A8%E6%83%85%E5%8C%85/%E6%8A%BD%E7%83%9F.gif" alt="抽烟"></p>
<p>除markdown语句外，亦可用HTML语法，如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/图片名.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/表情包/黄大叔.gif">

<h2 id="在线多媒体"><a href="#在线多媒体" class="headerlink" title="在线多媒体"></a>在线多媒体</h2><p>添加外部链接的图片就更简单了，直接将图片的URL贴进小括号中即可。</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">文字说明</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure>
<p>如我的头像<br><img src="https://avatars2.githubusercontent.com/u/35512473?s=100&v=4" alt="我的头像"></p>
<p>音乐和视频需要链接iframe格式的播放器插件，如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=4970195&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接把这段代码贴到指定位置即可。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=4970195&auto=0&height=66"></iframe>

<p>这种插件通常可以从资源所在的网站获取。如网易云音乐网页版播放器的专辑封面下方，就有“生成外链播放器”的选项。</p>
<h2 id="README文件"><a href="#README文件" class="headerlink" title="README文件"></a>README文件</h2><p>在博客的<code>source</code>根目录下添加一个<code>README.md</code>文件，正常填写内容。</p>
<p>然后打开博客的配置文件，搜索<code>skip_render</code>参数，设为<code>README.md</code>。这样，部署博客时就会自动跳过README.md文件，内容可以正常显示在github仓库的首页。</p>
<h2 id="个性化404页面"><a href="#个性化404页面" class="headerlink" title="个性化404页面"></a>个性化404页面</h2><p>在博客的<code>source</code>根目录下添加一个<code>404.md</code>文件，然后填入你想要的内容。如腾讯寻找走失儿童的404公益界面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 404</span><br><span class="line">date: 1970-01-01 00:00:00</span><br><span class="line">---</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span> <span class="attr">homePageName</span>=<span class="string">"Back to home"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，当访客访问到你博客中不存在的页面时，会自动跳转到个性化的404页面。</p>
<h2 id="搜索引擎收录"><a href="#搜索引擎收录" class="headerlink" title="搜索引擎收录"></a>搜索引擎收录</h2><p>默认情况下，博客的内容是不会出现在搜索引擎中的。如果希望你的博客能够被搜索引擎搜索到，需要一点额外的操作。</p>
<p>各大搜索的相关操作引擎都大同小异，不过百度比较繁琐，需要非常麻烦的注册工作，所以下文就以谷歌为例。。</p>
<p>在主题配置文件中搜索<code># SEO Settings</code>，往下拖，应该能够看到Google、Bing等搜索引擎的Webmaster设置。这时，我们就要点开注释中的地址，如 <a href="https://www.google.com/webmasters" target="_blank" rel="noopener">https://www.google.com/webmasters</a> ，登录你的谷歌账号后，输入站点的URL，获取验证信息。注意，这个网页先不要关。然后将获得的verification内容添加进配置文件中对应的位置后，如谷歌就是<code>google_site_verification:</code>后，以验证身份。这样，谷歌才能确认确实是这个站点的站长提交了收录请求。最后，重新部署网站，在刚刚的网页点击“验证”按钮，等待片刻即可。</p>
<p>请注意，只需复制弹出的窗口中<code>content</code>后面的内容。格式与位置可参考下面的示例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"D-2qw1qaLc7ftXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>稍等几天，你的站点应该就能进入搜索引擎的法眼了。</p>
<p>更多搜索引擎，请参考<a href="https://theme-next.org/docs/theme-settings/seo.html" target="_blank" rel="noopener">官方文档</a>。</p>
<h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><p>感觉站点地图还是有必要加的，不然搜索引擎无法索引到你的网站的具体文章。添加的步骤如下：</p>
<p>首先在根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<p>然后重新编译。部署，自动生成的站点地图就会出现。</p>
<p>在对应搜索引擎的网站提交你的网站的站点地图地址即可，默认为<code>https://xxxx.github.io/sitemap.xml</code>。你也可以在浏览器输入此url查看效果。</p>
<p>理论上，这样能够让搜索引擎更好地捕捉你的网站。</p>
<p>如果出现网址错误等情况，请将博客配置文件中的<code>url:</code>改成你的博客地址，如<code>https://xxxx.github.io/</code>。</p>
<hr>
<p>关于Hexo建站的内容就先写这么多吧。如果发现更多好点子，我会继续补充。欢迎点个star表示对我的鼓励。如有过时、疏漏或错误之处，还请发issue/评论通知我，我看到了就会更改，谢谢支持！</p>
]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo在github上搭建博客：个性化篇</title>
    <url>/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/2019-07-31-HexoBlog3.html</url>
    <content><![CDATA[<p>本文介绍了NexT主题的一些个性化配置方法，可以使你的博客变得与众不同。主要参考资料为官方网站的<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">文档</a>。当然，很多东西都已经写在配置文件的注释里了，也可以自行探索。</p>
<p>NexT的页面是通过<code>.swig</code>格式的文件渲染的，其语法和前端静态页面几乎一致，做过WEB开发的读者应该都可以看懂。当然很多功能都在主题的配置文件里面集成好了，并不需要我们手动修改源码。</p>
<a id="more"></a>

<p>本文完成时，采用NexT的版本依然是7.3.0，故可能有过时之处，还望读者留意。</p>
<h2 id="永久链接"><a href="#永久链接" class="headerlink" title="永久链接"></a>永久链接</h2><p>更改博客的配置文件的<code>permalink</code>属性，即可修改文章的URL形式。</p>
<p>支持的修改类型与修改方法请参考Hexo的<a href="https://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="noopener">官方文档</a>。</p>
<h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><p>最后在主题的配置文件中搜索<code>social:</code>，即可配置在侧边栏要显示的社交链接。其中，“||”之后的是fontawesome图标的名称。</p>
<p>同样，<code>links:</code>后可以配置相关链接。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://github.com/mxdzs0612</span> <span class="string">||</span> <span class="string">github</span> <span class="comment">#站点名称: 链接URL || 图标名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment">#是否显示图标</span></span><br><span class="line"><span class="attr">  icons_only:</span> <span class="literal">true</span> <span class="comment">#是否只显示图标，不显示站点名称</span></span><br><span class="line"><span class="attr">  transition:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: http://example.com</span></span><br></pre></td></tr></table></figure>
<h2 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h2><p>很多网站都自带一个按键，点击后可回到页面最上方。NexT也为我们集成了这一功能。</p>
<p>在主图配置文件中搜索<code>back2top:</code>，我们可以看到共有三个可选配置项。其作用分别如下。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="comment"># 开启右下角的回到顶部箭头</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 将回到顶部按钮改到侧边栏下方</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 回到顶部不止显示箭头，也显示阅读进度百分比</span></span><br><span class="line"><span class="attr">  scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="文末提示"><a href="#文末提示" class="headerlink" title="文末提示"></a>文末提示</h2><p>在路径<code>\themes\next\layout\_macro</code>中新建<code>passage-end-tag.swig</code>文件,并添加以下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>中间的内容可按个人喜好修改，符合HTML语法即可。</p>
<p>打开同目录下的<code>post.swig</code>文件，搜索<code>post-footer</code>，在其所在标签上方增加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后在主题的配置文件中的任意位置添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这样，每篇文章的末尾处，都会自动打印所添加的内容。</p>
<h2 id="公众号与打赏"><a href="#公众号与打赏" class="headerlink" title="公众号与打赏"></a>公众号与打赏</h2><p>NexT支持在页面上显示你的公众号的二维码。当然也可以展示你的zfb、wx收钱码，赚一点点打赏。</p>
<p>在主题的配置文件中搜索<code>wechat_subscriber</code>与<code>reward_settings</code>，根据注释设置即可。注意，你的二维码的位置应放在主题目录的<code>source</code>文件夹下，填写相对路径。关于添加图片的示例，请参考下一篇博文。</p>
<p>传好图片、设置好路径后，将对应位置的配置项前的井号取消，使其生效。</p>
<p>由于笔者没有公众号，因此没有尝试配置公众号订阅，不知道配置好了以后是什么样子的。打赏的效果是在文章底部出现一个按钮，二维码平时是隐藏的，点击按钮后才显示。</p>
<h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>在主题配置信息中搜索<code>creative_commons:</code>，将<code>post:</code>改成true即可。<br>这样在每篇文章末尾都会出现本文作者、本文链接已经版权声明。<br>注：NexT 7.4.0之前，此项配置似乎不是这样的。还在用旧版的同学请自行查找合适的方法。</p>
<h2 id="网页底部内容"><a href="#网页底部内容" class="headerlink" title="网页底部内容"></a>网页底部内容</h2><p>在主题配置文件中搜索<code>footer:</code>属性，按个人喜好进行配置即可。</p>
<p>可进行控制的项目有：</p>
<ul>
<li>网站从哪年起建立（显示为该年~今年）</li>
<li>所显示的图案及样式（依然是之前介绍过的fa图标，可设定其颜色以及是否为动态的，典型的设计为跳动的红心）</li>
<li>版权所有者声明，默认与author相同</li>
<li>是否显示Hexo、NexT的链接及版本号</li>
<li>是否显示网址ICP备案号</li>
</ul>
<p>这些内容都会显示在网页最底部。</p>
<h2 id="标签样式"><a href="#标签样式" class="headerlink" title="标签样式"></a>标签样式</h2><p>在主题配置文件中搜索<code>tag_icon</code>，配置为true，即可把标签前的井号替换成图标。</p>
<p>如果对默认的图标不满意，可修改<code>/themes/next/layout/_macro/</code>路径下的<code>post.swig</code>文件，搜索<code>footer class=&quot;post-footer&quot;</code>，修改<code>if theme.tag_icon</code>下的图标即可。</p>
<h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>在主题配置文件中搜索<code>codeblock:</code>，进行配置。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attr">  highlight_theme:</span> <span class="string">solarized</span> <span class="string">dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line"><span class="attr">  copy_button:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line"><span class="attr">    show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line"><span class="attr">    style:</span></span><br></pre></td></tr></table></figure>
<p>对几种不同的风格的样子，可点进链接预览。    </p>
<p>若将<code>copy_button.enable</code>设为true，可在代码块右侧开启复制按钮，点击即可复制代码。</p>
<h2 id="Github横幅"><a href="#Github横幅" class="headerlink" title="Github横幅"></a>Github横幅</h2><p>在主题配置文件中搜索<code>github_banner:</code>，设为true后，即可在站点右上角显示一个github图标。</p>
<p><code>permalink:</code>后填写Banner要跳转的链接地址（如个人主页），<code>title:</code>填鼠标放上去时显示的提示语。</p>
<h2 id="JavaScript动画"><a href="#JavaScript动画" class="headerlink" title="JavaScript动画"></a>JavaScript动画</h2><p>在主题配置文件中搜索<code>motion:</code>，根据相关注释配置页面加载时的动画。具体每种动画的实现效果还请一一尝试，这里列举我用到的几个。</p>
<p>首先是开启动态背景，最常用的是<a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">Canvas Nest</a>。将<code>canvas_nest</code>的enable设为true，表示开启。其余属性请自行探索。</p>
<p>修改<code>pace:</code>的效果则是会在页面顶部增添一个动态的加载条，显示页面加载的进度。</p>
<p>想要成功使用JavaScript动画，除配置之外，还要引入相应的js文件。这里建议采用CDN，免去git clone的麻烦。搜索<code>vendors:</code>，根据注释中的Example将所需的js文件复制到配置中即可。</p>
<h2 id="动态标题栏"><a href="#动态标题栏" class="headerlink" title="动态标题栏"></a>动态标题栏</h2><p>在<code>/themes/next/source/js/</code>下新建文件<code>crash_cheat.js</code>，接着把下列代码粘贴到<code>crash_cheat.js</code>文件中。（代码出处不详）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--崩溃欺骗--&gt;</span><br><span class="line"> <span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"> <span class="keyword">var</span> titleTime;</span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">         $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/img/TEP.ico"</span>);</span><br><span class="line">         <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">         clearTimeout(titleTime);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">         $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">         <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好了~'</span> + OriginTitle;</span><br><span class="line">         titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">         &#125;, <span class="number">2000</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>最后，在<code>\themes\next\layout\_layout.swig</code>末尾添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--崩溃欺骗--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/crash_cheat.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，网站的标题会出现有意思的特效。具体内容可以自己修改。</p>
<p>注意，attr的第二项（即逗号后面）要填你的网站图标的相对路径，不然切换之后网站的图标就没了。具体写法请参考主题配置文件的<code>favicon:</code>的设置。当然也可以借用你喜欢的网页的图标链接，通常是<code>网站url/favicon.ico</code>。</p>
<p>更新后疑似已失效，排查中……</p>
<h2 id="点击出现心形效果"><a href="#点击出现心形效果" class="headerlink" title="点击出现心形效果"></a>点击出现心形效果</h2><p>在<code>/themes/next/source/js/</code>下新建文件<code>clicklove.js</code>，接着把下列代码粘贴到<code>clicklove.js</code>文件中。（代码出处不详）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>最后，在<code>\themes\next\layout\_layout.swig</code>末尾添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击出现小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicklove.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>搞定！</p>
<h2 id="首页文章不显示全文"><a href="#首页文章不显示全文" class="headerlink" title="首页文章不显示全文"></a>首页文章不显示全文</h2><p>文章在首页全部展示实在太长了。在主题的配置文件中搜索<code>auto_excerpt:</code>，将<code>enable</code>改为true，即可只显示<code>length</code>中指定的字数，并在下方显示“阅读全文”按钮。对点开后的文章并不影响。</p>
<p>如果你希望手动控制在哪里显示阅读全文，NexT也是支持的。只需在文章中你想截断的位置，如某一段话的后面增加<code>&lt;!-- more --&gt;</code>即可。官方推荐的也是这种控制方式。</p>
<p>如果<code>scroll_to_more</code>设置为true，点开“阅读全文”后，会直接滚动到原文中<code>&lt;!-- more --&gt;</code>下方，跳过了首页预览看到过的那一部分。</p>
<h2 id="live2d模型"><a href="#live2d模型" class="headerlink" title="live2d模型"></a>live2d模型</h2><p>可以在博客上添加一个live2d看板娘。</p>
<p>首先执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>然后在<a href="https://github.com/summerscar/live2dDemo" target="_blank" rel="noopener">这里</a>挑选你喜欢的模型，甚至可以在<a href="http://summerscar.me/live2dDemo/" target="_blank" rel="noopener">这里</a>预览。挑选好后克隆仓库到博客主目录下，嫌大的话可以单独克隆你想要的文件，放在名称为<code>live2d_models</code>的文件夹下。当然也可以通过npm安装，但个人不是很推荐。</p>
<p>在<code>assets</code>文件夹中找到你选好的模型，记住文件夹名称。此文件夹里必须要有<code>xxxx.model.json</code>文件。</p>
<p>然后将下面这段代码复制到任意一个配置文件中。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># enable: false</span></span><br><span class="line"><span class="attr">    scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line"><span class="attr">    pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line"><span class="attr">    pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line"><span class="attr">    pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line"><span class="attr">    tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line"><span class="attr">    debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line"><span class="attr">    model:</span></span><br><span class="line"><span class="attr">      use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line"><span class="attr">    display:</span> <span class="comment"># 模型位置，根据不同的模型自行调整</span></span><br><span class="line"><span class="attr">      position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">      width:</span> <span class="number">150</span></span><br><span class="line"><span class="attr">      height:</span> <span class="number">300</span></span><br><span class="line"><span class="attr">    mobile:</span> <span class="comment"># 是否适用于移动端</span></span><br><span class="line"><span class="attr">      show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>将刚刚记住的名称复制到<code>model.use:</code>属性中，重新生成博客并部署即可。</p>
<p>个人最推荐使用<code>shizuku</code>，因为<ruby>“功能”最全<rt>会被辱骂</rt></ruby>。当然笔者也并没有一一试过，读者大可选择自己喜欢的那个。</p>
]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo在github上搭建博客：主题篇</title>
    <url>/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/2019-07-29-HexoBlog2.html</url>
    <content><![CDATA[<p> 本文介绍了hexo最常见的主题，<a href="https://theme-next.org/" target="_blank" rel="noopener">NexT主题</a>的基本用法。</p>
<p> 这一主题使用人数多，自由度高，可扩展性强，且美观简洁，是一款综合性能较好的主题。本博客也使用了NexT主题搭建。</p>
 <a id="more"></a>

<p> 本教程不会完全手把手教，需要读者有一定的自主学习能力，要能够在借助或不借助翻译软件或搜索引擎的情况下，看懂英文文档与注释。</p>
<p> 注意，由于NexT在不断更新、演进，搜索引擎检索到的许多配置方法都已过时。过时主要表现为，本来需要一点一点手动加的功能都被NexT集成了，这对新用户很友好，老用户就只能泪流满面了。本文完成于2019年8月初，NexT的版本为7.3.0，笔者无法保证本文中的信息今后不会过时、失效，请读者注意甄别。不过即使出现了变化，原理应当也是相通的，本文仍应具有一定的参考价值。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> hexo的默认主题为landscape，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">此页面</a>中选择喜欢的主题。但是不管选哪个，都需要自己下载。这里就以NexT为例了。</p>
<p>我们当然可以选择去官方网站下载源码，但是更简单的方法是使用git。在博客的目录下打开控制台，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>即可将主题文件克隆到themes目录下的next文件夹中。</p>
<p>如果需要备份主题文件，此时应直接删去next文件夹下的.git文件夹，以防出现各种奇怪的问题。理论上使用–recursive参数也可以，但是会非常麻烦。</p>
<p>若不慎忘记删去就进行了备份，备份时会上传一个空的next文件夹，但是里面的所有文件都不会上传，文件夹在github上显示为黑色。此时，若还想备份，必须先删掉整个next文件夹，commit一次，然后再将克隆下来的、删去.git文件夹后的next主题文件夹重新复制过来，再次commit。（使用rm指令应该也可以）</p>
<p>如果还是出现了文件备份不全的情况，可以自行修改主题所在目录下的<code>.gitignore</code>文件。笔者的做法是直接把默认的<code>landscape</code>目录中的<code>.gitignore</code>复制过来，经多台设备测试，没有出现什么问题。</p>
<p>注意，之后若安装了插件，主题的配置文件中可能含有各种app的id等信息，会公开展示在分支中备份源代码内。虽然一般这些应用都会验证使用者的身份，其他人即使获取到密钥也无法使用这些插件，但还是可能有人对此感到介意，因此在这里进行提醒。不想公开的话，就只能不备份主题文件了。</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>主题自己也有一个配置文件，文件名也叫<code>_config.yml</code>。此文件位于<code>/themes/next/_config.yml</code>路径下，与hexo的配置文件互补。如果出现冲突，以hexo的配置为准。请读者注意区分下文的叙述中要修改的东西到底在哪个<code>_config.yml</code>文件中。</p>
<h3 id="主题的切换"><a href="#主题的切换" class="headerlink" title="主题的切换"></a><strong>主题的切换</strong></h3><p>首先要切换主题。在hexo的配置文件中，找到<code># Extensions</code>注释，进行如下修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>其中，填入的内容应与<code>themes</code>文件夹中存放主题的子文件夹名称相同。</p>
<h3 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a><strong>选择语言</strong></h3><p>然后切换语言。进入<code>themes\next\languages\</code>目录，选择想要的语言，以简体中文为例，复制其文件名称<code>zh-CN</code>。</p>
<p>修改hexo的配置文件中的<code># Site</code>注释下的language条目，修改为对应语言的文件名，如<code>zh-CN</code>。不清楚具体位置的读者请参考上一篇博客的<code>博客的基本配置</code>部分。</p>
<p>值得注意的是，可能会有部分教程此处配置的是<code>zh-hans</code>。这种写法已经过时，请以<code>languages</code>目录下的文件名为准。</p>
<h3 id="主题模板"><a href="#主题模板" class="headerlink" title="主题模板"></a><strong>主题模板</strong></h3><p>NexT主题共提供了四种风格，可以点击<a href="https://github.com/theme-next/hexo-theme-next#live-preview" target="_blank" rel="noopener">官方github中Live Preview标签</a>下的页面进行预览。笔者对主题没有什么特别的偏好。但由于笔者是双子座，这里就选择了Gemini风格。</p>
<p>配置方法很简单。在NexT的配置文件中找到<code># Schemes</code>注释，在下面的四种风格中去掉你要选的那种风格名称之前的“#”注释即可。如</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>
<p><del>不进行设置时，默认选择的是第一个（Muse）。现在默认主题已经变成了Gemini。不是很建议选择Mist主题，因为后续支持的内容可能比较少。</del> 现在默认主题又变回了第一个，反复横跳= =</p>
<h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a><strong>菜单栏</strong></h3><p>在主题的配置文件中找到<code>Menu</code>关键字，进行设置。想要哪个就去掉哪个配置前面的“#”注释。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<p>例如：如果想给文章添加标签，应按如下步骤操作：</p>
<p>首先在博客根目录下，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<p>此操作会在<code>\source\tags</code>路径下生成一个<code>index.md</code>文件，其内容为</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-07-29 09:07:39</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>其中<code>comments: false</code>这行是自己加的，如果之后想要开启评论功能，这个页面应该是禁止评论的，建议设置。</p>
<p>最后去掉主题配置文件中<code>menu.tags</code>设置前的“#”注释即可。</p>
<p>要在写的文章中使用标签，只需在new出来的文章头部类似的位置添加<code>tags: [标签1, 标签2]</code>，标签即会自动归档，并显示在文章的末尾处。</p>
<p>同理可实现分类等功能。NexT默认提供的页面如下表。</p>
<table>
<thead>
<tr>
<th>键值</th>
<th>设定值</th>
<th>显示内容</th>
</tr>
</thead>
<tbody><tr>
<td>home</td>
<td>home: /</td>
<td>主页（默认开启）</td>
</tr>
<tr>
<td>about</td>
<td>about: /about</td>
<td>关于</td>
</tr>
<tr>
<td>tags</td>
<td>tags: /tags</td>
<td>标签</td>
</tr>
<tr>
<td>categories</td>
<td>categories: /categories</td>
<td>分类</td>
</tr>
<tr>
<td>archives</td>
<td>archives: /archives</td>
<td>归档（默认开启）</td>
</tr>
<tr>
<td>schedule</td>
<td>schedule: /schedule/</td>
<td>日程表</td>
</tr>
<tr>
<td>sitemap</td>
<td>sitemap: /sitemap.xml</td>
<td>站点地图</td>
</tr>
<tr>
<td>commonweal</td>
<td>commonweal: /404.html</td>
<td>404页</td>
</tr>
</tbody></table>
<p>熟练掌握后，可以自己设定想在菜单栏中展示的页面。</p>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a><strong>设置头像</strong></h3><p>在主题的配置文件中找到<code>avatar</code>关键字。</p>
<p>如果头像要使用在线地址，修改url的属性，内容填入图片的完整地址即可。如笔者使用自己的github头像，就可以这样配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">https://avatars2.githubusercontent.com/u/35512473</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line"><span class="attr">  rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line"><span class="attr">  rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>如果要使用本地文件，则应将头像文件放在主题文件夹的<code>themes\next\source\images</code>路径下，然后修改url的属性为<code>url: /images/avatar.png</code>即可。图片名称请自行设置。</p>
<p>也可在source文件夹下新建upload目录，配置为<code>url: /uploads/avatar.png</code>。</p>
<p>这里是非常自由的，可参考第四篇文章中插入图片的方式。</p>
<p><code>rounded</code>选项设为true后，头像将变成圆形。再把<code>rotated</code>打开，鼠标放上去后，头像会非常鬼畜地转动，很有意思。</p>
<h3 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a><strong>设置网站图标</strong></h3><p>网站图标就是显示在网页标签最左边的那个小图片。</p>
<p>先将图标文件复制到主题目录中的<code>images</code>文件夹下，然后在主题的配置文件中找到<code>favicon</code>关键字，按照提示修改为相对路径即可。</p>
<h2 id="集成第三方功能"><a href="#集成第三方功能" class="headerlink" title="集成第三方功能"></a>集成第三方功能</h2><p>NexT内部集成了大量第三方的工具。这里将挑选几个进行介绍。更多可用内容，请参考<a href="https://theme-next.org/docs/" target="_blank" rel="noopener">官方文档</a>。</p>
<p>理论上也可以使用<a href="https://hexo.io/plugins/index.html" target="_blank" rel="noopener">hexo的插件</a>，进行下载。<del>但是在NexT主题下，笔者的尝试<ruby>全部失败<rt><a href="https://zh.moegirl.org/%E4%B8%8D%E8%A6%81%E5%81%9C%E4%B8%8B%E6%9D%A5%E5%95%8A%EF%BC%81" target="_blank" rel="noopener">全部木大</a></rt></ruby>了。如果读者知道该怎么做，欢迎发<a href="https://github.com/mxdzs0612/mxdzs0612.github.io/issues" target="_blank" rel="noopener">issue</a>进行教学。</del> 经尝试发现，凡是出现这种情况的，都是因为对应的插件的用法不是那么简单，不是那种安装了、enable设为true了就能用的，需要更多更复杂的配置；要不然就是版本或主题风格冲突了。一些比较简单的、集成程度较好的第三方服务可以成功开启。</p>
<h3 id="阅读数量统计"><a href="#阅读数量统计" class="headerlink" title="阅读数量统计"></a><strong>阅读数量统计</strong></h3><p>NexT集成的阅读数量统计工具非常多，这里就以最简单的不蒜子为例。</p>
<p>在主题的配置文件中搜索<code>busuanzi_count</code>，将下面的enable属性设为true即可。下面几条属性可自行设置。</p>
<p>total_visitors：总访问人数统计；total_views：总访问量统计。这两个值会显示在页面的最下面。</p>
<p>post_views：文章阅读量统计，会显示在文章的标题下方。</p>
<p>xxx_icon可设置这些访问量的示意图标，图标采用的是<a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">Font Awesome Icons</a>，可自行替换成自己喜欢的。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_views_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">  post_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure>
<p>不蒜子的缺点是统计不是很准（只多不少，很容易刷数据）。如想使用其它第三方统计工具，<del>个人推荐<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>。</del> 近期改版后，LeanCloud需要上传身份证照片实名认证才能创建新应用，个人对此非常介意，因此不再推荐。请不想用不蒜子的同学自行查找其他统计方法。</p>
<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a><strong>搜索功能</strong></h3><p>在主题配置文件中搜索<code># Search Services</code>注释，下面包含了NexT集成的两种配置方式。先来介绍第一种，即<code>algolia_search</code>。</p>
<p>首先进入<a href="https://www.algolia.com/" target="_blank" rel="noopener">Algolia官方网站</a>，注册账号。可以直接使用你的github账号。</p>
<p>填写信息后（部分信息可跳过不填），点击页面上的粉红色按钮<code>NEW INDEX</code>，新建一个索引，起一个名字（后面会用到）。</p>
<p>来到<a href="https://www.algolia.com/api-keys" target="_blank" rel="noopener">API Keys</a>页面，<code>Application ID</code>和<code>Search-Only API Key</code>都是后面要用的。</p>
<p>再来到<code>All API Keys</code>标签，点击Edit，在ACL选项中打开<code>search</code>、<code>addObject</code>、<code>deleteObject</code>、<code>listIndexes</code>、<code>deleteIndex</code>。</p>
<p>然后安装插件。在主题根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-algoliasearch --save</span><br></pre></td></tr></table></figure>
<p>然后在根目录的站点配置文件中，增添</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line"><span class="attr">  applicationID:</span> <span class="string">'appId'</span></span><br><span class="line"><span class="attr">  apiKey:</span> <span class="string">'apiKey'</span></span><br><span class="line"><span class="attr">  indexName:</span> <span class="string">'indexName'</span></span><br><span class="line"><span class="attr">  chunkSize:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>
<p>将刚刚记录下来的值填进去。</p>
<p>但还没结束。下一步需要让Algolia记录你的文章数据。</p>
<p>在根目录下打开Git Bash，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HEXO_ALGOLIA_INDEXING_KEY=Search-Only API key</span><br></pre></td></tr></table></figure>
<p>（注：若用cmd，要将export换成set，但此法可能会导致不可预知的错误，因此建议使用Git Bash）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo algolia</span><br></pre></td></tr></table></figure>
<p>顺利的话，Algolia后台的<code>Indices</code>下应该就能看到我们的博客的信息了。</p>
<p>最后添加页面上的入口及脚本。进入主题目录下，Git Bash输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-algolia-instant-search <span class="built_in">source</span>/lib/algolia-instant-search</span><br></pre></td></tr></table></figure>
<p>在<code>source/lib/</code>目录下安装algolia-instant-search所需的文件。</p>
<p>最后，把主题配置文件中的<code>algolia_search.enable</code>，属性设为true，即可开启搜索功能。</p>
<p>更详细信息，可参考github上的<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/ALGOLIA-SEARCH.md" target="_blank" rel="noopener">文档</a>。</p>
<h3 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a><font color=blue><strong>本地搜索功能</strong></font></h3><p>algolia免费用户策略改版后出现了一个缺点：不支持全文搜索。虽然在校学生可以申请到一年的免费使用权，但笔者还是觉得不解决根本问题。因此本站决定换用<code>Local Search</code>。个人也更推荐这种搜索方式。</p>
<p>首先在根目录打开Git Bash，运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>在博客配置文件增添下列语句：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>最后在主题配置文件中搜索<code># Local search</code>，将<code>enable</code>属性设为true即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line"><span class="attr">  preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>搜索功能的位置和algolia一样，也在菜单栏的最下面，并且支持全文搜索。此外，也可自己定制样式，非常好用。</p>
<p>这种方式就简单了很多，缺点是需要额外的一些安装包，换设备部署应重新安装。</p>
<p>此外，这种方法的原理是在本地生成一个包含索引的<code>search.xml</code>文件。感兴趣的读者可以点开看看其中有什么内容。随着文章数量增多，文件将越来越大，可能会降低博客的生成与备份效率。</p>
<h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a><strong>评论</strong></h3><p>本站原先使用了<a href="https://gitalk.github.io/" target="_blank" rel="noopener">GITALK</a>。这种方式的优点是配置简单，缺点是不支持无登陆评论。</p>
<p>GITALK是利用github API、基于Github issue开发的评论系统。</p>
<p>首先要去<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">这里</a>申请一个新app。四个位置依次填入app名称、博客地址<code>https://xxxx.github.io</code>、描述（任填）以及回调地址（仍然填博客地址）。点击绿色按钮创建。</p>
<p>完成后，记住app的信息，在主题配置文件中搜索<code># Gitalk</code>，参照注释进行设置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">##next/_config.yml</span></span><br><span class="line">    <span class="comment"># Gitalk</span></span><br><span class="line">    <span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="string">​</span>    <span class="attr">gitalk:</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">enable:</span> <span class="literal">false</span>     <span class="comment"># 设为true即可启用</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">github_id:</span>        <span class="comment"># Github repo owner，填入你的用户名</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">repo:</span>             <span class="comment"># Repository name to store issues，新建的用于保存评论数据的仓库名，填入博客的repo名即可，如xxxx.github.io`</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">client_id:</span>        <span class="comment"># Github Application Client ID，填入app信息</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">client_secret:</span>    <span class="comment"># Github Application Client Secret，填入app信息</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">admin_user:</span>       <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize github issues</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">      <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">      <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">      <span class="comment"># Available value: en, es-ES, fr, ru, zh-CN, zh-TW</span></span><br><span class="line"><span class="string">​</span>      <span class="attr">language:</span></span><br></pre></td></tr></table></figure>
<p>这样就完成了。</p>
<p>使用时，需要登录github账号才能评论，评论呈现在页面最下方。每篇文章都要进行初始化，建立一个原始的issue，才能增添新的评论。而只有在<code>admin_user</code>中配置了用户名的用户可以开启某篇文章的评论功能，较为麻烦。因此笔者在考虑更换评论系统，<del>本站的评论功能暂时关闭。</del> 更换已完成，请见下文。</p>
<p>如果之前注册了LeanCloud，使用LeanCloud提供的评论插件<code>Valine</code>是一个非常不错的选择。这是少有的支持无登陆评论的插件。免费版虽有诸多限制，但也足够使用，推荐不介意上传自己手持身份证照片的读者采用Valine，具体教程还请参考<a href="https://theme-next.org/docs/third-party-services/comments-and-widgets#Valine-China" target="_blank" rel="noopener">官方文档</a>。</p>
<h3 id="utterances评论"><a href="#utterances评论" class="headerlink" title="utterances评论"></a><font color=blue><strong>utterances评论</strong></font></h3><p>NexT 7.3.0 + 版本集成了<a href="https://utteranc.es/" target="_blank" rel="noopener">utterances</a>评论。这一工具原理和GITALK类似，但是索取的权限少，并且不用指定某个人来初始化，因此好用得多，推荐给大家。</p>
<p>首先来<a href="https://github.com/apps/utterances" target="_blank" rel="noopener">这里</a>为utterances在github上授权。只有这样，才能让utterances有资格访问你的issue。还可指定utterances能够访问的仓库，可见其权限控制做的非常好。</p>
<p>授权完毕后，来到博客根目录，打开Git Bash，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save github:theme-next/hexo-next-utteranc</span><br></pre></td></tr></table></figure>
<p>然后在任意配置文件中（建议在主题配置文件中）新建如下配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Demo: https://utteranc.es/  http://trumandu.github.io/about/</span></span><br><span class="line"><span class="attr">utteranc:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="comment">#Github repo such as :TrumanDu/comments</span></span><br><span class="line"><span class="attr">  pathname:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># theme: github-light,github-dark,github-dark-orange</span></span><br><span class="line"><span class="attr">  theme:</span> <span class="string">github-light</span></span><br><span class="line"><span class="attr">  cdn:</span> <span class="attr">https://utteranc.es/client.js</span></span><br></pre></td></tr></table></figure>
<p>其中，repo下填写你想把哪个仓库的issue当作评论的位置，如<code>xxxx/xxxx.github.io</code>。其它选项按注释设置或保留原样即可。</p>
<p>重新生成博客，在每篇文章的最下方即会出现utterances评论。登录github账号，任何人可以新建评论，初始化工作将由utterances机器人完成，非常方便。</p>
<p>缺点也有一些，首先，目前界面都是英文的。虽然无伤大雅，但笔者还是希望能够保持界面语言的一致性，目前的样式实在有些别扭。</p>
<p>第二，目前issue的名称似乎只支持pathname，当路径为中文时，此种方式会产生乱码。笔者没有进行尝试，不知道按照GITALK的方式进行配置是否有效，希望能够在后续的文档中有说明吧。</p>
<p>如果出现跳转错误的问题（如登录后跳转到<code>https://yoursite.com/</code>），请在博客的配置文件中搜索<code># URL</code>，将<code>url:</code>配置为<code>/</code>或你的站点的URL地址。</p>
<p>目前最新版NexT还支持多评论，详情请见<a href="https://github.com/theme-next/hexo-theme-next/pull/1048" target="_blank" rel="noopener">此issue</a>。</p>
<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a><strong>字数统计</strong></h3><p>首先在根目录运行Git Bash，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<p>然后在博客的配置文件中新增配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude_codeblock:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>最后，在主题的配置文件中搜索<code>symbols_count_time:</code>，进行如下修改</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">300</span></span><br></pre></td></tr></table></figure>
<p>上述设置是<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">官方文档</a>对以汉字为主的博客的推荐设置，当然也可以按个人喜好自定义为合适的值。</p>
<p>这样，在每篇文章的标题下，会显示文章的字数与预计所需阅读时间。</p>
<p>如果<code>item_text_total</code>设置为true，在页面最下方还会显示站点总字数与站点阅读总时长的估计值。</p>
<h3 id="日历插件"><a href="#日历插件" class="headerlink" title="日历插件"></a><strong>日历插件</strong></h3><p>NexT适配了一个云日历插件，可以在日历上显示提交标记。<br>在根目录下打开Git Bash，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save github:theme-next/theme-next-calendar</span><br></pre></td></tr></table></figure>
<p>安装插件。然后在NexT的主题配置文件中添加配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">CloudCalendar:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">  single:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  root:</span> <span class="string">/calendar/</span></span><br><span class="line"><span class="attr">  calendarCdn:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-calendar/calendar.min.js</span></span><br><span class="line"><span class="attr">  langCdn:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-calendar/languages.min.js</span></span><br><span class="line">  <span class="comment">#disableSidebar: false</span></span><br></pre></td></tr></table></figure>
<p>即可使用。</p>
<p>此插件会在侧边栏的最下方添加一个日历。如果你的侧边栏比较窄，视觉效果可能会稍差。此外，在低分辨率的屏幕上，增加日历会使侧边栏出现一个滚动条，可能会影响美观。</p>
<p>使用CDN的缺点是无法进行细节上的自定义配置，只能照着默认的来。如果想自己修改日历的颜色、位置等信息，请用<a href="https://github.com/icecory/theme-next-calendar" target="_blank" rel="noopener">这种方法</a>安装，就可以自行修改文件。</p>
<p><del>不知为什么最近突然不好使了，容我调试一下……</del></p>
]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo在github上搭建博客：基础篇</title>
    <url>/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/2019-07-29-HexoBlog1.html</url>
    <content><![CDATA[<p>本文记录在github上搭建hexo博客的过程，其中包含了一些实用的小技巧，能够让新手少踩一些坑。</p>
<p>关于hexo的简介，可以参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>。</p>
<a id="more"></a>

<p>依照本文以及接下来的若干篇文章的步骤进行操作，读者即可自行搭建出和本博客类似的博客。本博客的每一个组件的增加和配置都会在接下来的文章中进行讲解。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">操作系统： Windows 10 1903专业版</span><br><span class="line">编辑器： VS Code &amp; Notepad++</span><br><span class="line">浏览器： Chrome</span><br></pre></td></tr></table></figure>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>首先注册<a href="https://github.com/" target="_blank" rel="noopener">github</a>账号。</p>
<p>然后需要安装、配置好<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>。git的配置中，用户名和邮箱应与github相同。</p>
<p>安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js</a>。</p>
<p>具体安装过程还请自行探索或在搜索引擎中检索，此处从略。</p>
<p>然后配置ssh密钥。在控制台输入</p>
<blockquote>
<p>ssh-keygen -t rsa -C “github的注册邮箱”</p>
</blockquote>
<p>一路回车，得到信息，密钥会被保存在系统盘用户目录下的.ssh文件夹中。</p>
<p>找到<code>id_rsa.pub</code>文件并用文本编辑器（如<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>）打开，复制里面的内容。注意此处有两个文件，其中<code>id_rsa</code>文件中保存的是<strong>私钥</strong>，是只能自己看的，而.pub结尾的文件中的公钥是可以上传的，不要点错了。</p>
<p>进入github的<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">ssh配置页面</a>，点击New SSH key，将刚才复制的公钥的值粘贴到Key一栏中。title可任填，如blog。完毕后点击绿色按钮保存。</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>在github的右上角点击<a href="https://github.com/new" target="_blank" rel="noopener">Create a new repository</a>。</p>
<p>在<code>Repository name</code>中填入<strong>你的用户名.github.io</strong>，如<code>mxdzs0612.github.io</code>即为本博客的仓库名。<br>这同时也是博客的域名。在下文中，将用“xxxx”代替用户名。</p>
<p>其它选项任填，完毕后点击绿色按钮创建。</p>
<h2 id="准备分支"><a href="#准备分支" class="headerlink" title="准备分支"></a>准备分支</h2><p>为了能够在多台设备上维护博客，同时对博客源文件在github上进行备份，这里建议直接新建分支。如果不想备份，可以忽略此小节以及后文中的相关内容。</p>
<p>点击仓库左上角的Branch标签，默认值为master。在这里新建hexo分支，并将其设置为主要（默认）分支。分支名可任取。</p>
<p>后续过程中，master分支用于存放博客的静态页面，而hexo分支用于存放源文件。</p>
<p>在本地某个文件夹下打开Git Bash，用SSH方式克隆仓库。指令为</p>
<blockquote>
<p>git clone <a href="mailto:git@github.com">git@github.com</a>:xxxx/xxxx.github.io.git</p>
</blockquote>
<p>这一步的目的是获取远程仓库自动生成的.git文件夹及其中的配置内容。</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>进入刚克隆的<code>xxxx.github.io</code>文件夹，在空白处点击右键打开Git Bash，依次执行以下指令：</p>
<blockquote>
<p>npm install hexo</p>
</blockquote>
<blockquote>
<p>hexo init</p>
</blockquote>
<blockquote>
<p>npm install</p>
</blockquote>
<blockquote>
<p>npm install hexo-deployer-git</p>
</blockquote>
<p>Bash中，当前分支应显示为hexo。</p>
<p>此时，hexo的安装应该已完成。</p>
<p>Windows系统不建议在cmd中安装hexo，因为这样可能会直接安装到系统盘个人目录下的某个文件夹中，控制台会出现各种找不到指令的问题，之后的配置非常复杂，严重影响使用。Git Bash就不一样，会装在当前目录下。后面的文章中，所有使用npm命令进行安装的插件都建议使用Git Bash操作。</p>
<h2 id="博客的基本配置"><a href="#博客的基本配置" class="headerlink" title="博客的基本配置"></a>博客的基本配置</h2><p>打开目录下的<code>_config.yml</code>文件，继续修改其中的内容。请注意，<strong>yaml语法中，冒号后面需要空一格</strong>，再键入内容。</p>
<p>基本的配置在<code># Site</code>下，即</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">这是一个博客</span> <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">这是一个副标题</span> <span class="comment"># 副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">试着搭个博客</span> <span class="comment"># 网页描述，类似座右铭，一般会显示在author附近</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">mxdzs0612</span> <span class="comment"># 站长信息</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 网站语言，部分主题的默认语言是英文，建议修改</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span> <span class="comment"># 网站时区，默认使用电脑的时区</span></span><br></pre></td></tr></table></figure>
<p>然后比较重要的是<code># Deployment</code>下的部署信息，即</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/xxxx/xxxx.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>请务必将_config.yml中的deploy下branch参数的值修改为master，这样编译好的静态文件才会被上传到master分支。</p>
<h2 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h2><h3 id="博客的部署"><a href="#博客的部署" class="headerlink" title="博客的部署"></a><strong>博客的部署</strong></h3><p>先来部署网站。Shift+右键点击文件夹的空白位置，打开控制台，依次执行</p>
<blockquote>
<p>hexo generate</p>
</blockquote>
<blockquote>
<p>hexo server</p>
</blockquote>
<p>在浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，可以在本地预览博客的效果。初始化后会预置一个hello-world.md文件，因此会有一篇默认博客。</p>
<p>如果需要新建文章，输入</p>
<blockquote>
<p>hexo new “文章名”</p>
</blockquote>
<p>在<code>xxxx.github.io\source\_posts\</code>路径下找到该文章，用markdown编辑器进行编辑。推荐使用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>或<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a>。</p>
<p>请注意，不要随便删除new出来的.md文件中自带的内容。将来文章的标题、标签、分类等许多内容都需要在这里进行设置。如<code>title:</code>属性后面就是文章的标题，默认与文件名相同，可进行修改（并不一定要和文件名相同）。</p>
<p>保存，依次执行下列操作</p>
<blockquote>
<p>hexo clean</p>
</blockquote>
<p>clean操作的目的是清除缓存（上一次generate生成的静态文件等），这一步不是必须的，但是如果网站显示出现异常或不符合预期之处，可尝试此操作。</p>
<blockquote>
<p>hexo generate</p>
</blockquote>
<blockquote>
<p>hexo deploy</p>
</blockquote>
<p>如果是第一次执行此过程，中段会跳出github登录提示，用仓库所在的账户登录即可。</p>
<p>这时访问 xxxx.github.io ，即可看到文章已发布。如果没有变化，请等待几秒钟（十秒左右），然后强制清除缓存并刷新页面（Chrome浏览器的快捷键为Ctrl+Shift+R），即可看到效果。对文章进行进行的修改，通常也需强制刷新、清除浏览器缓存后才能看到效果。</p>
<p>后两步操作可合并、简写成一步，即</p>
<blockquote>
<p>hexo g -d</p>
</blockquote>
<h3 id="备份源代码"><a href="#备份源代码" class="headerlink" title="备份源代码"></a><strong>备份源代码</strong></h3><p>不要忘记将源文件也上传到github。在Git Bash中依次执行</p>
<blockquote>
<p>git add .</p>
</blockquote>
<p>添加文件到本地缓冲区</p>
<blockquote>
<p>git commit –m “add branch”</p>
</blockquote>
<p>确认修改并上传到本地版本控制库中。引号中的内容可任填，填入的内容会用作提交的commit message，显示在github code列表中文件名的右侧。</p>
<blockquote>
<p>git push </p>
</blockquote>
<p>推送到远程仓库。如此即可将源代码上传至hexo分支。</p>
<p>日常使用时，建议的执行顺序为先备份源代码，再部署。虽然一般不会出现什么问题，但万一突然断网甚至系统崩溃导致文件丢失，交换顺序可能就会使源码再也恢复不了啦。</p>
<h3 id="已有博客的备份"><a href="#已有博客的备份" class="headerlink" title="已有博客的备份"></a><strong>已有博客的备份</strong></h3><p>如果之前已经创建并上传好了博客，没有备份源码，但又突然想备份了，还是有救的。备份的操作与之前几乎相同，依然要创建分支。区别在于建立的分支中已经有内容了，此时的内容是部署的文件的一份拷贝，而非源码。</p>
<p>因此，clone之后，要将clone下来的文件中除.git文件夹以外的文件全部删掉，我们只需要.git中的信息。将原来写的博客的源文件整体复制到.git文件夹所在的目录，就算是改好了。</p>
<p>注意，复制过来的源文件中应该包含一个<code>.gitignore</code>文件，如果没有则需要手动创建，内容为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure>
<p>如果之前安装过主题，也应该将themes文件夹中对应主题目录下的.git文件夹删掉，防止主题文件上传不上去。这会导致主题的配置在其它设备上无法使用。</p>
<p>之后再按照上文中的步骤将源文件push到github上。这样，源文件就会覆盖掉分支中的文件，从而实现备份。</p>
<h3 id="新设备上的操作"><a href="#新设备上的操作" class="headerlink" title="新设备上的操作"></a><strong>新设备上的操作</strong></h3><p>安装过程与之前一样，只需省略初始化（init）的步骤即可。</p>
<p>配置好环境后，首先克隆仓库。在任意文件夹下打开Git Bash，输入</p>
<blockquote>
<p>git clone <a href="mailto:git@github.com">git@github.com</a>:xxxx/xxxx.github.io.git</p>
</blockquote>
<p>注意，默认分支仍应为hexo。如已修改，需使用下列语句克隆对应分支：</p>
<blockquote>
<p>git clone -b hexo <a href="mailto:git@github.com">git@github.com</a>:xxxx/xxxx.github.io.git</p>
</blockquote>
<p>进入刚拷贝的<code>xxxx.github.io</code>文件夹，通过Git Bash依次执行</p>
<blockquote>
<p>npm install hexo</p>
</blockquote>
<blockquote>
<p>npm install</p>
</blockquote>
<blockquote>
<p>npm install hexo-deployer-git</p>
</blockquote>
<p><strong>切记不要执行hexo init</strong>，否则之前写好的东西就都被丢弃了。</p>
<p>这样就在新的设备上也安装好了hexo。此后的修改配置部署操作就都如常了。注意要为新设备重新申请一个ssh密钥。请参考上文，自行操作。</p>
<p>当然，如果额外安装过hexo插件，就只能找个地方记住自己装了哪些东西，然后在新设备上再装一遍。否则可能出现在另一台设备上生成的博客缺少东西的情况。</p>
<p>注意，如果在其它设备修改过文件，在新设备上进行操作之前，一定记得要先使用下述指令</p>
<blockquote>
<p>git pull</p>
</blockquote>
<p>将本地仓库与远程仓库同步（拉取+合并）。否则可能出现版本冲突、无法push的情况，还要手动处理，造成不必要的麻烦。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>发布新文章的步骤如下：在控制台输入</p>
<blockquote>
<p>hexo n “文件名” </p>
</blockquote>
<p>编辑完毕后，执行</p>
<blockquote>
<p>hexo clean</p>
</blockquote>
<blockquote>
<p>hexo g -d</p>
</blockquote>
<p>若要备份源代码，只需</p>
<blockquote>
<p>git add .</p>
</blockquote>
<blockquote>
<p>git commit -m “xxx”</p>
</blockquote>
<blockquote>
<p>git push</p>
</blockquote>
<p>以上操作均可在控制台中完成，不必切换到Git Bash。</p>
<p>笔者为懒人提供了两个批处理脚本，这样就不必手打命令了。</p>
<p>“同步源文件到github.bat”：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> /p commit_log=请输入 commit 日志信息:</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"%commit_log%"</span></span><br><span class="line">git push</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>“发布文章到github.bat”：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">hexo clean&amp;&amp;hexo g&amp;&amp;hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
