<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安装、配置WSL并在在其中安装Docker]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%2F2019-10-09-DockerOnWSL.html</url>
    <content type="text"><![CDATA[本文总结了使用WSL（Windows Subsystem for Linux，即Windows系统自带的Linux子系统）安装Docker的方法。 读者最好要先熟悉Linux的基本操作，尤其是能够初步上手vim，至少要能够对着快捷键参照表使用vim编辑器进行基本的键入、复制、粘贴、撤销等操作。 本文部分内容参考了知乎的文章，在此声明。 环境配置1操作系统： Windows 10 1903 专业版 64位 版本18362 首先要开启window功能。 设置&gt;应用&gt;程序和功能&gt;启用或关闭window功能 勾选“适用于Linux的Windows子系统”前的方框。 然后在“管理可选功能”中添加“OpenSSH客户端”。 安装WSL系统打开Microsoft Store，在搜索框输入WSL，挑选你喜欢的Linux子系统。这里以Ubuntu 18.04 LTS为例。点击获取，等待下载完毕。 之后可能会要求重启电脑。 装好的系统会像应用一样出现在开始菜单中。点击打开系统，等待一段时间，系统会自动进行初始化。初始化过程中会要求设置用户名和密码，个人电脑建议不要设置得太过复杂，以免在之后频繁输入的过程中造成不必要的麻烦。 可输入以下指令查看基本信息，检查安装的效果。 12345678#查看linux内核版本uname -r#查看系统版本cat /etc/lsb-release#查看本地磁盘内存情况（可见C盘、D盘）df -h 默认的安装位置为：C:\Users\{你的用户名}\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_xxxxxxxxxxxxx\。此目录中，LocalState\rootfs\文件夹下即为Ubuntu的根目录。熟悉Ubuntu的同学应该很容易通过其中的文件结构辨认出来。 配置WSL系统强烈建议将软件源更换为国内源，因为在国内使用官方源下载的速度实在过于感人。推荐阿里源和中科大源，具体内容可以很容易搜索到。这里以阿里源为例。 123456789#使用root权限登录，然后输入密码sudo -i#接下来备份当前源，输入以下命令cp /etc/apt/sources.list /etc/apt/sources.list.old #这个sources.list文件就是源文件，删除该文件，重新写一个rm /etc/apt/sources.listvim /etc/apt/sources.list 此时会进入vim编辑器。将下面的内容复制进文件中即可。输入i进入编辑模式，按右键粘贴或不进入编辑模式，输入p进行粘贴。然后按ESC退出编辑模式，输入:wq回车，保存并退出。 12345678910111213141516171819deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable# deb-src [arch=amd64] https://download.docker.com/linux/ubuntu bionic stabledeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse 下面更新镜像源和软件包。 12sudo apt update #更新软件源sudo apt upgrade #更新软件包 美化vimvim的默认情况下完全没法看，字体和背景都是深色，极容易让人眼瞎。建议更换主题。这里采用molokai配色。参考此文。 123456mkdir .vimcd .vimgit clone https://github.com/tomasr/molokai.gitcp -rf molokai/colors/ ./colorsvim vimrccolorscheme molokai 使用终端登录WSL可以通过SSH方法，使用终端登录WSL。这里使用的是Windows Terminal，可以在Microsoft Store中获取。其实用自带的PowerShell也可以。 1234567891011#设置root用户的口令（密码），用作后续登陆使用sudo passwd root#安装openssh-server（Ubuntu自带，可省）sudo apt install openssh-server#备份很重要sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak#使用vim进行编辑，按i进入insert模式sudo vim /etc/ssh/sshd_config 在vim中分别找到并对应修改四处，修改后ESC，输入wq保存退出，具体如下： 1234Port = 8022ListenAddress 0.0.0.0 # 如果需要指定监听的IP则去除最左侧的井号，并配置对应IP，默认即监听PC所有IP。故可不修改。PermitRootLogin yes # 如果你需要用root直接登录系统则此处改为yes，在WSL中可能会不太好使，后文有解决办法。PasswordAuthentication yes # 将no改为yes表示使用帐号密码方式登录 之后启动SSH并检查状态，输出running即正确。 123sudo service ssh start #启动SSH服务sudo service ssh status #检查状态sudo systemctl enable ssh #开机自动启动ssh命令 下一步需要配置ssh密钥。执行如下命令： 123sudo ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_keysudo ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_keysudo ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key 然后可尝试使用SSH登录。在终端输入 1ssh root@127.0.0.1 -p 8022 键入密码，即可登录。 如果遇到密码明明正确，却不断提示重试，建议通过这种方式登录： 1ssh 你的用户名@127.0.0.1 -p 8022 输入密码后，执行 1sudo -i 再次输入密码，也可达到同样的登录root用户的效果。 安装Docker按照如下指令安装即可。执行第一行时如果报警，可不必理会。 12345678910# Install packages to allow apt to use a repository over HTTPS$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common# Add Docker's official GPG key$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -# Set up the repositorysudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"# Update source listssudo apt-get update# Install Dockersudo apt-get install docker-ce 执行 1docker --version 能正确显示版本号就是安装成功了.]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WSL</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：更新篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F2019-10-08-HexoBlog5.html</url>
    <content type="text"><![CDATA[本文记录了更新NexT版本的过程中遇到的各种问题。如果今后hexo更新了，我也会把我的做法贴在本文中。 NexT主题通常会在每个月的1号更新一个版本，在官方网站的首页会贴出详细的更新日志，可进行查看，判断自己是否需要进行更新。没有必要每个月都准时进行更新，只要博客的版本稳定可用就行了。 笨方法更新NexT我使用的是最笨的更新方法，即手动合并配置。注意，此法需要在之前备份时保留主题文件夹下的.git文件夹。我采用的办法是将这个文件夹改个名，然后丢到.gitignore文件里去。想要更新主题的时候再改回来。 在主题文件夹中打开控制台，执行 git pull 此时肯定有一大堆冲突，尤其是主题配置文件，一定会冲突。 把冲突的文件一一剪切出来，然后再次执行 git pull 这样，更新就完成了。 接下来需要还原我们之前进行的配置。使用VS Code的“选择以进行比较”功能（需打开侧边栏），比较clone下来的文件和我们之前剪切走的文件，查看新文件与旧文件在哪些地方出现了改变。手动将这些配置一一复制回去即可。 通常，小版本的更新改变都不会特别大，一般就是多了几个功能、修了几个bug什么的，因此工作量不算太大，十来分钟就能完成，还可以顺便了解一下新增了哪些有趣的功能。因此笔者仍在采用笨方法。主题配置文件中配置项的位置可能会发生变化，本来在前面的配置可能突然跑到后面去了，因此不要无脑复制，要多多留意。 版本更新后，之前做的一些配置可能会失效，也可能会被集成到一起，详细内容还要参考官方网站了。如果用不到更新的新特性的话，个人不建议频繁更新。 数据文件法更新NexT利用Hexo的数据文件特性，似乎可以较容易地更新主题。不过个人感觉此方法会把博客的配置搞的乱七八糟的，也并没省多少事，因此未进行过尝试。如果读者觉得这种方法很方便，可以教教我~ 感兴趣的同学可以自行参考官方文档。]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github上的一些不错的Java学习资源]]></title>
    <url>%2F%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%2F2019-08-11-LearnJavaOnGithub.html</url>
    <content type="text"><![CDATA[这里总结一下在Github上看到的比较好的Java学习资料，其中大部分都是中文的。 这份资料主要是方便自己看的。不过，如果有读者不小心读到本文并且感觉对自己有帮助的话，还望去右上角给我点个star鼓励我。 完全总结篇Java学习+面试指南： https://github.com/Snailclimb/JavaGuide Cyc Tech Interview Guide： https://github.com/CyC2018/CS-Notes 后端架构师技术图谱： https://github.com/xingshaocheng/architect-awesome 3y： https://github.com/ZhongFuCheng3y/3y Java工程师成神之路： https://github.com/hollischuang/toBeTopJavaer 互联网 Java 工程师进阶知识完全扫盲： https://github.com/doocs/advanced-java 处于萌芽阶段的 Java 核心知识库： https://github.com/crossoverJie/JCSprout 汇总java生态圈技术心得： https://github.com/aalansehaiyang/technology-talk 面试总结×2： https://github.com/gzc426/Java-Interview &amp;&amp; https://github.com/xbox1994/Java-Interview 知识体系篇All Algorithms implemented in Java (英文)： https://github.com/TheAlgorithms/Java Design patterns implemented in Java (英文)： https://github.com/iluwatar/java-design-patterns 用动画的形式呈现解LeetCode题目的思路： https://github.com/MisterBooo/LeetCodeAnimation Java LeetCode题解： https://github.com/wind-liang/leetcode 系统设计入门： https://github.com/donnemartin/system-design-primer Java 程序员眼中的 Linux： https://github.com/judasn/Linux-Tutorial 框架使用篇Spring Boot 系列实战合集: https://github.com/hansonwang99/Spring-Boot-In-Action 循序渐进，学习Spring Boot： https://github.com/wuyouzhuguli/SpringAll Spring Boot 教程、技术栈示例代码，快速简单上手教程： https://github.com/ityouknow/spring-boot-examples spring boot demo： https://github.com/xkcoding/spring-boot-demo 框架增强篇hope-boot脚手架： https://github.com/hope-for/hope-boot JHipster： https://github.com/jhipster/generator-jhipster Spring-Boot-Plus： https://github.com/geekidea/spring-boot-plus 开源项目篇电商系统： https://github.com/macrozheng/mall 秒杀系统： https://github.com/qiurunze123/miaosha 微人事： https://github.com/lenve/vhr V部落博客管理平台： https://github.com/lenve/VBlog halo 一款现代化的个人独立博客系统： https://github.com/halo-dev/halo 后台管理系统： https://github.com/elunez/eladmin Spring Cloud电商平台： https://github.com/paascloud/paascloud-master 面试指南篇2019年最新总结，阿里，腾讯，百度，美团，头条等技术面试题目，以及答案，专家出题人分析汇总: https://github.com/0voice/interview_internal_reference Coding Interview University (英文)： https://github.com/jwasham/coding-interview-university Everything you need to know to get the job： https://github.com/kdn251/interviews Materials to help you rock your next coding interview（英文）： https://github.com/yangshun/tech-interview-handbook 读书充电篇Java开发者技术书籍大全： https://github.com/sorenduan/awesome-java-books 编程之法（已停更）： https://github.com/julycoding/The-Art-Of-Programming-By-July On Java 8（翻译中）：https://github.com/LingCoder/OnJava8 effective-java-3rd-chinese： https://github.com/sjsdfg/effective-java-3rd-chinese Freely available programming books（各种语言，含中文）： https://github.com/EbookFoundation/free-programming-books 开发工具篇lombok： https://github.com/rzwitserloot/lombok WxJava（微信开发 Java SDK）: https://github.com/Wechat-Group/WxJava 史上最全的整合第三方登录的开源库： https://github.com/justauth/JustAuth Hutool： https://github.com/looly/hutool Swagger： https://github.com/swagger-api/swagger-ui JWT登录支持： https://github.com/jwtk/jjwt 其它类型篇互联网公司技术架构： https://github.com/davideuler/architecture.of.internet-product 大牛企业内部pdf与PPT： https://github.com/0voice/from_coder_to_expert]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：多媒体与杂项篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F2019-08-01-HexoBlog4.html</url>
    <content type="text"><![CDATA[本文将介绍如何在博客中添加多媒体内容，以及一些不太好归类的杂七杂八的小东西。 本地图片有时候我们想把自己设备上的图片传到博客上。 第一种方法需要借助第三方工具。在根路径下打开Git Bash，执行 1npm install hexo-asset-image --save 修改博客的配置文件，将post_asset_folder:设为true。 此后，每次新建博客的时候，都会在相同目录下新建一个同名文件夹。将图片放入此文件夹中，然后按照markdown语法引入图片即可。文件夹当然也可以手动创建。 1![文字说明](文件夹名/图片名.jpg) 如果不想这么麻烦，可以用第二种方法：直接把图片塞到主题的source\images目录下。这样可以不用安装额外的包，但可能导致图片管理困难 管理起来也并不困难，继续创建子文件夹即可，分类很方便。因此个人建议不要安装前面那个包，采用这种方法人工管理。比较麻烦的一点是，用本地编辑器的预览功能（如VS Code的Ctrl+K V）预览博客文件时，无法看到图片，从而无法预知实际效果。只能执行hexo s打开本地hexo服务器进行预览。 引入图片时，使用绝对路径即可。 1![文字说明](/images/图片名.gif) 除markdown语句外，亦可用HTML语法，如 1&lt;img src="/images/图片名.jpg"&gt; 在线多媒体添加外部链接的图片就更简单了，直接将图片的URL贴进小括号中即可。 1![文字说明](图片地址) 如我的头像 音乐和视频需要链接iframe格式的播放器插件，如 1&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&amp;id=4970195&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt; 直接把这段代码贴到指定位置即可。 这种插件通常可以从资源所在的网站获取。如网易云音乐网页版播放器的专辑封面下方，就有“生成外链播放器”的选项。 README文件在主题的source根目录下添加一个README.md文件，正常填写内容。 然后打开博客的配置文件，搜索skip_render参数，设为README.md。这样，部署博客时就会自动跳过README.md文件，内容可以正常显示在github仓库的首页。 搜索引擎收录默认情况下，博客的内容是不会出现在搜索引擎中的。如果希望你的博客能够被搜索引擎搜索到，需要一点额外的操作。 各大搜索的相关操作引擎都大同小异，不过百度比较繁琐，需要非常麻烦的注册工作，所以下文就以谷歌为例。。 在主题配置文件中搜索# SEO Settings，往下拖，应该能够看到Google、Bing等搜索引擎的Webmaster设置。这时，我们就要点开注释中的地址，如 https://www.google.com/webmasters ，登录你的谷歌账号后，输入站点的URL，获取验证信息。注意，这个网页先不要关。然后将获得的verification内容添加进配置文件中对应的位置后，如谷歌就是google_site_verification:后，以验证身份。这样，谷歌才能确认确实是这个站点的站长提交了收录请求。最后，重新部署网站，在刚刚的网页点击“验证”按钮，等待片刻即可。 请注意，只需复制弹出的窗口中content后面的内容。格式与位置可参考下面的示例。 1&lt;meta name="google-site-verification" content="D-2qw1qaLc7ftXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"&gt; 稍等几天，你的站点应该就能进入搜索引擎的法眼了。 更多搜索引擎，请参考官方文档。 站点地图感觉站点地图还是有必要加的，不然搜索引擎无法索引到你的网站的具体文章。添加的步骤如下： 首先在根目录下执行 1npm install hexo-generator-sitemap --save 然后重新编译。部署，自动生成的站点地图就会出现。 在对应搜索引擎的网站提交你的网站的站点地图地址即可，默认为https://xxxx.github.io/sitemap.xml。你也可以在浏览器输入此url查看效果。 理论上，这样能够让搜索引擎更好地捕捉你的网站。 如果出现网址错误等情况，请将博客配置文件中的url:改成你的博客地址，如https://xxxx.github.io/。 关于Hexo建站的内容就先写这么多吧。如果发现更多好点子，我会继续补充。欢迎点个star表示对我的鼓励。如有过时、疏漏或错误之处，还请发issue/评论通知我，我看到了就会更改，谢谢支持！]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：个性化篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F2019-07-31-HexoBlog3.html</url>
    <content type="text"><![CDATA[本文介绍了NexT主题的一些个性化配置方法，可以使你的博客变得与众不同。主要参考资料为官方网站的文档。当然，很多东西都已经写在配置文件的注释里了，也可以自行探索。 NexT的页面是通过.swig格式的文件渲染的，其语法和前端静态页面几乎一致，做过WEB开发的读者应该都可以看懂。当然很多功能都在主题的配置文件里面集成好了，并不需要我们手动修改源码。 本文完成时，采用NexT的版本依然是7.3.0，故可能有过时之处，还望读者留意。 永久链接更改博客的配置文件的permalink属性，即可修改文章的URL形式。 支持的修改类型与修改方法请参考Hexo的官方文档。 侧边栏设置最后在主题的配置文件中搜索social:，即可配置在侧边栏要显示的社交链接。其中，“||”之后的是fontawesome图标的名称。 同样，links:后可以配置相关链接。 1234567891011121314social: GitHub: https://github.com/mxdzs0612 || github #站点名称: 链接URL || 图标名称social_icons: enable: true #是否显示图标 icons_only: true #是否只显示图标，不显示站点名称 transition: truelinks_icon: linklinks_title: 友情链接links_layout: block#links_layout: inlinelinks: #Title: http://example.com 回到顶部很多网站都自带一个按键，点击后可回到页面最上方。NexT也为我们集成了这一功能。 在主图配置文件中搜索back2top:，我们可以看到共有三个可选配置项。其作用分别如下。 1234567back2top: # 开启右下角的回到顶部箭头 enable: true # 将回到顶部按钮改到侧边栏下方 sidebar: false # 回到顶部不止显示箭头，也显示阅读进度百分比 scrollpercent: true 文末提示在路径\themes\next\layout\_macro中新建passage-end-tag.swig文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 中间的内容可按个人喜好修改，符合HTML语法即可。 打开同目录下的post.swig文件，搜索post-footer，在其所在标签上方增加 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 最后在主题的配置文件中的任意位置添加 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 这样，每篇文章的末尾处，都会自动打印所添加的内容。 公众号与打赏NexT支持在页面上显示你的公众号的二维码。当然也可以展示你的zfb、wx收钱码，赚一点点打赏。 在主题的配置文件中搜索wechat_subscriber与reward_settings，根据注释设置即可。注意，你的二维码的位置应放在主题目录的source文件夹下，填写相对路径。关于添加图片的示例，请参考下一篇博文。 传好图片、设置好路径后，将对应位置的配置项前的井号取消，使其生效。 由于笔者没有公众号，因此没有尝试配置公众号订阅，不知道配置好了以后是什么样子的。打赏的效果是在文章底部出现一个按钮，二维码平时是隐藏的，点击按钮后才显示。 版权声明在主题配置信息中搜索creative_commons:，将post:改成true即可。这样在每篇文章末尾都会出现本文作者、本文链接已经版权声明。注：NexT 7.4.0之前，此项配置似乎不是这样的。还在用旧版的同学请自行查找合适的方法。 网页底部内容在主题配置文件中搜索footer:属性，按个人喜好进行配置即可。 可进行控制的项目有： 网站从哪年起建立（显示为该年~今年） 所显示的图案及样式（依然是之前介绍过的fa图标，可设定其颜色以及是否为动态的，典型的设计为跳动的红心） 版权所有者声明，默认与author相同 是否显示Hexo、NexT的链接及版本号 是否显示网址ICP备案号 这些内容都会显示在网页最底部。 标签样式在主题配置文件中搜索tag_icon，配置为true，即可把标签前的井号替换成图标。 如果对默认的图标不满意，可修改/themes/next/layout/_macro/路径下的post.swig文件，搜索footer class=&quot;post-footer&quot;，修改if theme.tag_icon下的图标即可。 代码风格在主题配置文件中搜索codeblock:，进行配置。 123456789101112codeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: night blue # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: false # Available values: default | flat | mac style: 对几种不同的风格的样子，可点进链接预览。 若将copy_button.enable设为true，可在代码块右侧开启复制按钮，点击即可复制代码。 Github横幅在主题配置文件中搜索github_banner:，设为true后，即可在站点右上角显示一个github图标。 permalink:后填写Banner要跳转的链接地址（如个人主页），title:填鼠标放上去时显示的提示语。 JavaScript动画在主题配置文件中搜索motion:，根据相关注释配置页面加载时的动画。具体每种动画的实现效果还请一一尝试，这里列举我用到的几个。 首先是开启动态背景，最常用的是Canvas Nest。将canvas_nest的enable设为true，表示开启。其余属性请自行探索。 修改pace:的效果则是会在页面顶部增添一个动态的加载条，显示页面加载的进度。 想要成功使用JavaScript动画，除配置之外，还要引入相应的js文件。这里建议采用CDN，免去git clone的麻烦。搜索vendors:，根据注释中的Example将所需的js文件复制到配置中即可。 动态标题栏在/themes/next/source/js/下新建文件crash_cheat.js，接着把下列代码粘贴到crash_cheat.js文件中。（代码出处不详） 1234567891011121314151617&lt;!--崩溃欺骗--&gt; var OriginTitle = document.title; var titleTime; document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = '╭(°A°`)╮ 页面崩溃啦 ~'; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = '(ฅ&gt;ω&lt;*ฅ) 噫又好了~' + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125; &#125;); 最后，在\themes\next\layout\_layout.swig末尾添加 12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/crash_cheat.js"&gt;&lt;/script&gt; 这样，网站的标题会出现有意思的特效。具体内容可以自己修改。 注意，attr的第二项（即逗号后面）要填你的网站图标的相对路径，不然切换之后网站的图标就没了。具体写法请参考主题配置文件的favicon:的设置。当然也可以借用你喜欢的网页的图标链接，通常是网站url/favicon.ico。 更新后疑似已失效，排查中…… 点击出现心形效果在/themes/next/source/js/下新建文件clicklove.js，接着把下列代码粘贴到clicklove.js文件中。（代码出处不详） 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 最后，在\themes\next\layout\_layout.swig末尾添加 12&lt;!-- 页面点击出现小红心 --&gt;&lt;script type="text/javascript" src="/js/src/clicklove.js"&gt;&lt;/script&gt; 搞定！ 首页文章不显示全文文章在首页全部展示实在太长了。在主题的配置文件中搜索auto_excerpt:，将enable改为true，即可只显示length中指定的字数，并在下方显示“阅读全文”按钮。对点开后的文章并不影响。 如果你希望手动控制在哪里显示阅读全文，NexT也是支持的。只需在文章中你想截断的位置，如某一段话的后面增加&lt;!-- more --&gt;即可。官方推荐的也是这种控制方式。 如果scroll_to_more设置为true，点开“阅读全文”后，会直接滚动到原文中&lt;!-- more --&gt;下方，跳过了首页预览看到过的那一部分。 live2d模型可以在博客上添加一个live2d看板娘。 首先执行 1npm install --save hexo-helper-live2d 然后在这里挑选你喜欢的模型，甚至可以在这里预览。挑选好后克隆仓库到博客主目录下，嫌大的话可以单独克隆你想要的文件，放在名称为live2d_models的文件夹下。当然也可以通过npm安装，但个人不是很推荐。 在assets文件夹中找到你选好的模型，记住文件夹名称。此文件夹里必须要有xxxx.model.json文件。 然后将下面这段代码复制到任意一个配置文件中。 12345678910111213141516171819202122232425## Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # enable: false scriptFrom: local # 默认 pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 pluginModelPath: assets/ # 模型文件相对与插件根目录路径 # scriptFrom: jsdelivr # jsdelivr CDN # scriptFrom: unpkg # unpkg CDN # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: use: live2d-widget-model-wanko # npm-module package name # use: wanko # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/wanko # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url display: # 模型位置，根据不同的模型自行调整 position: right width: 150 height: 300 mobile: # 是否适用于移动端 show: true 将刚刚记住的名称复制到model.use:属性中，重新生成博客并部署即可。 个人最推荐使用shizuku，因为“功能”最全会被辱骂。当然笔者也并没有一一试过，读者大可选择自己喜欢的那个。]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：主题篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F2019-07-29-HexoBlog2.html</url>
    <content type="text"><![CDATA[本文介绍了hexo最常见的主题，NexT主题的基本用法。 这一主题使用人数多，自由度高，可扩展性强，且美观简洁，是一款综合性能较好的主题。本博客也使用了NexT主题搭建。 本教程不会完全手把手教，需要读者有一定的自主学习能力，要能够在借助或不借助翻译软件或搜索引擎的情况下，看懂英文文档与注释。 注意，由于NexT在不断更新、演进，搜索引擎检索到的许多配置方法都已过时。过时主要表现为，本来需要一点一点手动加的功能都被NexT集成了，这对新用户很友好，老用户就只能泪流满面了。本文完成于2019年8月初，NexT的版本为7.3.0，笔者无法保证本文中的信息今后不会过时、失效，请读者注意甄别。不过即使出现了变化，原理应当也是相通的，本文仍应具有一定的参考价值。 安装 hexo的默认主题为landscape，可以在此页面中选择喜欢的主题。但是不管选哪个，都需要自己下载。这里就以NexT为例了。 我们当然可以选择去官方网站下载源码，但是更简单的方法是使用git。在博客的目录下打开控制台，输入 1git clone https://github.com/theme-next/hexo-theme-next themes/next 即可将主题文件克隆到themes目录下的next文件夹中。 如果需要备份主题文件，此时应直接删去next文件夹下的.git文件夹，以防出现各种奇怪的问题。理论上使用–recursive参数也可以，但是会非常麻烦。 若不慎忘记删去就进行了备份，备份时会上传一个空的next文件夹，但是里面的所有文件都不会上传，文件夹在github上显示为黑色。此时，若还想备份，必须先删掉整个next文件夹，commit一次，然后再将克隆下来的、删去.git文件夹后的next主题文件夹重新复制过来，再次commit。（使用rm指令应该也可以） 如果还是出现了文件备份不全的情况，可以自行修改主题所在目录下的.gitignore文件。笔者的做法是直接把默认的landscape目录中的.gitignore复制过来，经多台设备测试，没有出现什么问题。 注意，之后若安装了插件，主题的配置文件中可能含有各种app的id等信息，会公开展示在分支中备份源代码内。虽然一般这些应用都会验证使用者的身份，其他人即使获取到密钥也无法使用这些插件，但还是可能有人对此感到介意，因此在这里进行提醒。不想公开的话，就只能不备份主题文件了。 基本配置主题自己也有一个配置文件，文件名也叫_config.yml。此文件位于/themes/next/_config.yml路径下，与hexo的配置文件互补。如果出现冲突，以hexo的配置为准。请读者注意区分下文的叙述中要修改的东西到底在哪个_config.yml文件中。 主题的切换首先要切换主题。在hexo的配置文件中，找到# Extensions注释，进行如下修改： 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 其中，填入的内容应与themes文件夹中存放主题的子文件夹名称相同。 选择语言然后切换语言。进入themes\next\languages\目录，选择想要的语言，以简体中文为例，复制其文件名称zh-CN。 修改hexo的配置文件中的# Site注释下的language条目，修改为对应语言的文件名，如zh-CN。不清楚具体位置的读者请参考上一篇博客的博客的基本配置部分。 值得注意的是，可能会有部分教程此处配置的是zh-hans。这种写法已经过时，请以languages目录下的文件名为准。 主题模板NexT主题共提供了四种风格，可以点击官方github中Live Preview标签下的页面进行预览。笔者对主题没有什么特别的偏好。但由于笔者是双子座，这里就选择了Gemini风格。 配置方法很简单。在NexT的配置文件中找到# Schemes注释，在下面的四种风格中去掉你要选的那种风格名称之前的“#”注释即可。如 12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 不进行设置时，默认选择的是第一个（Muse）。现在默认主题已经变成了Gemini。不是很建议选择Mist主题，因为后续支持的内容可能比较少。 现在默认主题又变回了第一个，反复横跳= = 菜单栏在主题的配置文件中找到Menu关键字，进行设置。想要哪个就去掉哪个配置前面的“#”注释。 123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 例如：如果想给文章添加标签，应按如下步骤操作： 首先在博客根目录下，执行 1hexo new page tags 此操作会在\source\tags路径下生成一个index.md文件，其内容为 123456---title: tagsdate: 2019-07-29 09:07:39type: "tags"comments: false--- 其中comments: false这行是自己加的，如果之后想要开启评论功能，这个页面应该是禁止评论的，建议设置。 最后去掉主题配置文件中menu.tags设置前的“#”注释即可。 要在写的文章中使用标签，只需在new出来的文章头部类似的位置添加tags: [标签1, 标签2]，标签即会自动归档，并显示在文章的末尾处。 同理可实现分类等功能。NexT默认提供的页面如下表。 键值 设定值 显示内容 home home: / 主页（默认开启） about about: /about 关于 tags tags: /tags 标签 categories categories: /categories 分类 archives archives: /archives 归档（默认开启） schedule schedule: /schedule/ 日程表 sitemap sitemap: /sitemap.xml 站点地图 commonweal commonweal: /404.html 404页 熟练掌握后，可以自己设定想在菜单栏中展示的页面。 设置头像在主题的配置文件中找到avatar关键字。 如果头像要使用在线地址，修改url的属性，内容填入图片的完整地址即可。如笔者使用自己的github头像，就可以这样配置： 12345678910# Sidebar Avataravatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: https://avatars2.githubusercontent.com/u/35512473 # If true, the avatar would be dispalyed in circle. rounded: false # If true, the avatar would be rotated with the cursor. rotated: false 如果要使用本地文件，则应将头像文件放在主题文件夹的themes\next\source\images路径下，然后修改url的属性为url: /images/avatar.png即可。图片名称请自行设置。 也可在source文件夹下新建upload目录，配置为url: /uploads/avatar.png。 这里是非常自由的，可参考第四篇文章中插入图片的方式。 rounded选项设为true后，头像将变成圆形。再把rotated打开，鼠标放上去后，头像会非常鬼畜地转动，很有意思。 设置网站图标网站图标就是显示在网页标签最左边的那个小图片。 先将图标文件复制到主题目录中的images文件夹下，然后在主题的配置文件中找到favicon关键字，按照提示修改为相对路径即可。 集成第三方功能NexT内部集成了大量第三方的工具。这里将挑选几个进行介绍。更多可用内容，请参考官方文档。 理论上也可以使用hexo的插件，进行下载。但是在NexT主题下，笔者的尝试全部失败全部木大了。如果读者知道该怎么做，欢迎发issue进行教学。 经尝试发现，凡是出现这种情况的，都是因为对应的插件的用法不是那么简单，不是那种安装了、enable设为true了就能用的，需要更多更复杂的配置；要不然就是版本或主题风格冲突了。一些比较简单的、集成程度较好的第三方服务可以成功开启。 阅读数量统计NexT集成的阅读数量统计工具非常多，这里就以最简单的不蒜子为例。 在主题的配置文件中搜索busuanzi_count，将下面的enable属性设为true即可。下面几条属性可自行设置。 total_visitors：总访问人数统计；total_views：总访问量统计。这两个值会显示在页面的最下面。 post_views：文章阅读量统计，会显示在文章的标题下方。 xxx_icon可设置这些访问量的示意图标，图标采用的是Font Awesome Icons，可自行替换成自己喜欢的。 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 不蒜子的缺点是统计不是很准（只多不少，很容易刷数据）。如想使用其它第三方统计工具，个人推荐LeanCloud。 近期改版后，LeanCloud需要上传身份证照片实名认证才能创建新应用，个人对此非常介意，因此不再推荐。请不想用不蒜子的同学自行查找其他统计方法。 搜索功能在主题配置文件中搜索# Search Services注释，下面包含了NexT集成的两种配置方式。先来介绍第一种，即algolia_search。 首先进入Algolia官方网站，注册账号。可以直接使用你的github账号。 填写信息后（部分信息可跳过不填），点击页面上的粉红色按钮NEW INDEX，新建一个索引，起一个名字（后面会用到）。 来到API Keys页面，Application ID和Search-Only API Key都是后面要用的。 再来到All API Keys标签，点击Edit，在ACL选项中打开search、addObject、deleteObject、listIndexes、deleteIndex。 然后安装插件。在主题根目录下执行 1npm install hexo-algoliasearch --save 然后在根目录的站点配置文件中，增添 12345algolia: applicationID: 'appId' apiKey: 'apiKey' indexName: 'indexName' chunkSize: 5000 将刚刚记录下来的值填进去。 但还没结束。下一步需要让Algolia记录你的文章数据。 在根目录下打开Git Bash，输入 1export HEXO_ALGOLIA_INDEXING_KEY=Search-Only API key （注：若用cmd，要将export换成set，但此法可能会导致不可预知的错误，因此建议使用Git Bash） 1hexo algolia 顺利的话，Algolia后台的Indices下应该就能看到我们的博客的信息了。 最后添加页面上的入口及脚本。进入主题目录下，Git Bash输入 1git clone https://github.com/theme-next/theme-next-algolia-instant-search source/lib/algolia-instant-search 在source/lib/目录下安装algolia-instant-search所需的文件。 最后，把主题配置文件中的algolia_search.enable，属性设为true，即可开启搜索功能。 更详细信息，可参考github上的文档。 本地搜索功能algolia免费用户策略改版后出现了一个缺点：不支持全文搜索。虽然在校学生可以申请到一年的免费使用权，但笔者还是觉得不解决根本问题。因此本站决定换用Local Search。个人也更推荐这种搜索方式。 首先在根目录打开Git Bash，运行 1npm install hexo-generator-searchdb --save 在博客配置文件增添下列语句： 12345search: path: search.xml field: post format: html limit: 10000 最后在主题配置文件中搜索# Local search，将enable属性设为true即可。 12345678910111213# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 搜索功能的位置和algolia一样，也在菜单栏的最下面，并且支持全文搜索。此外，也可自己定制样式，非常好用。 这种方式就简单了很多，缺点是需要额外的一些安装包，换设备部署应重新安装。 此外，这种方法的原理是在本地生成一个包含索引的search.xml文件。感兴趣的读者可以点开看看其中有什么内容。随着文章数量增多，文件将越来越大，可能会降低博客的生成与备份效率。 评论本站原先使用了GITALK。这种方式的优点是配置简单，缺点是不支持无登陆评论。 GITALK是利用github API、基于Github issue开发的评论系统。 首先要去这里申请一个新app。四个位置依次填入app名称、博客地址https://xxxx.github.io、描述（任填）以及回调地址（仍然填博客地址）。点击绿色按钮创建。 完成后，记住app的信息，在主题配置文件中搜索# Gitalk，参照注释进行设置： 123456789101112131415##next/_config.yml # Gitalk # Demo: https://gitalk.github.io​ gitalk:​ enable: false # 设为true即可启用​ github_id: # Github repo owner，填入你的用户名​ repo: # Repository name to store issues，新建的用于保存评论数据的仓库名，填入博客的repo名即可，如xxxx.github.io`​ client_id: # Github Application Client ID，填入app信息​ client_secret: # Github Application Client Secret，填入app信息​ admin_user: # GitHub repo owner and collaborators, only these guys can initialize github issues​ distraction_free_mode: true # Facebook-like distraction free mode # Gitalk's display language depends on user's browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available value: en, es-ES, fr, ru, zh-CN, zh-TW​ language: 这样就完成了。 使用时，需要登录github账号才能评论，评论呈现在页面最下方。每篇文章都要进行初始化，建立一个原始的issue，才能增添新的评论。而只有在admin_user中配置了用户名的用户可以开启某篇文章的评论功能，较为麻烦。因此笔者在考虑更换评论系统，本站的评论功能暂时关闭。 更换已完成，请见下文。 如果之前注册了LeanCloud，使用LeanCloud提供的评论插件Valine是一个非常不错的选择。这是少有的支持无登陆评论的插件。免费版虽有诸多限制，但也足够使用，推荐不介意上传自己手持身份证照片的读者采用Valine，具体教程还请参考官方文档。 utterances评论NexT 7.3.0 + 版本集成了utterances评论。这一工具原理和GITALK类似，但是索取的权限少，并且不用指定某个人来初始化，因此好用得多，推荐给大家。 首先来这里为utterances在github上授权。只有这样，才能让utterances有资格访问你的issue。还可指定utterances能够访问的仓库，可见其权限控制做的非常好。 授权完毕后，来到博客根目录，打开Git Bash，执行 1npm install --save github:theme-next/hexo-next-utteranc 然后在任意配置文件中（建议在主题配置文件中）新建如下配置 12345678# Demo: https://utteranc.es/ http://trumandu.github.io/about/utteranc: enable: true repo: #Github repo such as :TrumanDu/comments pathname: pathname # theme: github-light,github-dark,github-dark-orange theme: github-light cdn: https://utteranc.es/client.js 其中，repo下填写你想把哪个仓库的issue当作评论的位置，如xxxx/xxxx.github.io。其它选项按注释设置或保留原样即可。 重新生成博客，在每篇文章的最下方即会出现utterances评论。登录github账号，任何人可以新建评论，初始化工作将由utterances机器人完成，非常方便。 缺点也有一些，首先，目前界面都是英文的。虽然无伤大雅，但笔者还是希望能够保持界面语言的一致性，目前的样式实在有些别扭。 第二，目前issue的名称似乎只支持pathname，当路径为中文时，此种方式会产生乱码。笔者没有进行尝试，不知道按照GITALK的方式进行配置是否有效，希望能够在后续的文档中有说明吧。 如果出现跳转错误的问题（如登录后跳转到https://yoursite.com/），请在博客的配置文件中搜索# URL，将url:配置为/或你的站点的URL地址。 目前最新版NexT还支持多评论，详情请见此issue。 字数统计首先在根目录运行Git Bash，执行 1npm install hexo-symbols-count-time --save 然后在博客的配置文件中新增配置 123456symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false 最后，在主题的配置文件中搜索symbols_count_time:，进行如下修改 12345678# Post wordcount display settings# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: true awl: 2 wpm: 300 上述设置是官方文档对以汉字为主的博客的推荐设置，当然也可以按个人喜好自定义为合适的值。 这样，在每篇文章的标题下，会显示文章的字数与预计所需阅读时间。 如果item_text_total设置为true，在页面最下方还会显示站点总字数与站点阅读总时长的估计值。 日历插件NexT适配了一个云日历插件，可以在日历上显示提交标记。在根目录下打开Git Bash，执行 1npm install --save github:theme-next/theme-next-calendar 安装插件。然后在NexT的主题配置文件中添加配置 12345678CloudCalendar: enable: true language: zh-CN single: true root: /calendar/ calendarCdn: //cdn.jsdelivr.net/gh/theme-next/theme-next-calendar/calendar.min.js langCdn: //cdn.jsdelivr.net/gh/theme-next/theme-next-calendar/languages.min.js #disableSidebar: false 即可使用。 此插件会在侧边栏的最下方添加一个日历。如果你的侧边栏比较窄，视觉效果可能会稍差。此外，在低分辨率的屏幕上，增加日历会使侧边栏出现一个滚动条，可能会影响美观。 使用CDN的缺点是无法进行细节上的自定义配置，只能照着默认的来。如果想自己修改日历的颜色、位置等信息，请用这种方法安装，就可以自行修改文件。 不知为什么最近突然不好使了，容我调试一下……]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo在github上搭建博客：基础篇]]></title>
    <url>%2F%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF%2F2019-07-29-HexoBlog1.html</url>
    <content type="text"><![CDATA[本文记录在github上搭建hexo博客的过程，其中包含了一些实用的小技巧，能够让新手少踩一些坑。 关于hexo的简介，可以参考官方文档。 依照本文以及接下来的若干篇文章的步骤进行操作，读者即可自行搭建出和本博客类似的博客。本博客的每一个组件的增加和配置都会在接下来的文章中进行讲解。 123操作系统： Windows 10 1903专业版编辑器： VS Code &amp; Notepad++浏览器： Chrome 环境准备首先注册github账号。 然后需要安装、配置好git。git的配置中，用户名和邮箱应与github相同。 安装node.js。 具体安装过程还请自行探索或在搜索引擎中检索，此处从略。 然后配置ssh密钥。在控制台输入 ssh-keygen -t rsa -C “github的注册邮箱” 一路回车，得到信息，密钥会被保存在系统盘用户目录下的.ssh文件夹中。 找到id_rsa.pub文件并用文本编辑器（如Notepad++）打开，复制里面的内容。注意此处有两个文件，其中id_rsa文件中保存的是私钥，是只能自己看的，而.pub结尾的文件中的公钥是可以上传的，不要点错了。 进入github的ssh配置页面，点击New SSH key，将刚才复制的公钥的值粘贴到Key一栏中。title可任填，如blog。完毕后点击绿色按钮保存。 创建仓库在github的右上角点击Create a new repository。 在Repository name中填入你的用户名.github.io，如mxdzs0612.github.io即为本博客的仓库名。这同时也是博客的域名。在下文中，将用“xxxx”代替用户名。 其它选项任填，完毕后点击绿色按钮创建。 准备分支为了能够在多台设备上维护博客，同时对博客源文件在github上进行备份，这里建议直接新建分支。如果不想备份，可以忽略此小节以及后文中的相关内容。 点击仓库左上角的Branch标签，默认值为master。在这里新建hexo分支，并将其设置为主要（默认）分支。分支名可任取。 后续过程中，master分支用于存放博客的静态页面，而hexo分支用于存放源文件。 在本地某个文件夹下打开Git Bash，用SSH方式克隆仓库。指令为 git clone git@github.com:xxxx/xxxx.github.io.git 这一步的目的是获取远程仓库自动生成的.git文件夹及其中的配置内容。 安装hexo进入刚克隆的xxxx.github.io文件夹，在空白处点击右键打开Git Bash，依次执行以下指令： npm install hexo hexo init npm install npm install hexo-deployer-git Bash中，当前分支应显示为hexo。 此时，hexo的安装应该已完成。 Windows系统不建议在cmd中安装hexo，因为这样可能会直接安装到系统盘个人目录下的某个文件夹中，控制台会出现各种找不到指令的问题，之后的配置非常复杂，严重影响使用。Git Bash就不一样，会装在当前目录下。后面的文章中，所有使用npm命令进行安装的插件都建议使用Git Bash操作。 博客的基本配置打开目录下的_config.yml文件，继续修改其中的内容。请注意，yaml语法中，冒号后面需要空一格，再键入内容。 基本的配置在# Site下，即 123456title: 这是一个博客 # 网站标题subtitle: 这是一个副标题 # 副标题description: 试着搭个博客 # 网页描述，类似座右铭，一般会显示在author附近author: mxdzs0612 # 站长信息language: zh-CN # 网站语言，部分主题的默认语言是英文，建议修改timezone: Asia/Shanghai # 网站时区，默认使用电脑的时区 然后比较重要的是# Deployment下的部署信息，即 1234deploy: type: git repo: https://github.com/xxxx/xxxx.github.io.git branch: master 请务必将_config.yml中的deploy下branch参数的值修改为master，这样编译好的静态文件才会被上传到master分支。 完成部署博客的部署先来部署网站。Shift+右键点击文件夹的空白位置，打开控制台，依次执行 hexo generate hexo server 在浏览器输入 http://localhost:4000/ ，可以在本地预览博客的效果。初始化后会预置一个hello-world.md文件，因此会有一篇默认博客。 如果需要新建文章，输入 hexo new “文章名” 在xxxx.github.io\source\_posts\路径下找到该文章，用markdown编辑器进行编辑。推荐使用VS Code或Typora。 请注意，不要随便删除new出来的.md文件中自带的内容。将来文章的标题、标签、分类等许多内容都需要在这里进行设置。如title:属性后面就是文章的标题，默认与文件名相同，可进行修改（并不一定要和文件名相同）。 保存，依次执行下列操作 hexo clean clean操作的目的是清除缓存（上一次generate生成的静态文件等），这一步不是必须的，但是如果网站显示出现异常或不符合预期之处，可尝试此操作。 hexo generate hexo deploy 如果是第一次执行此过程，中段会跳出github登录提示，用仓库所在的账户登录即可。 这时访问 xxxx.github.io ，即可看到文章已发布。如果没有变化，请等待几秒钟（十秒左右），然后强制清除缓存并刷新页面（Chrome浏览器的快捷键为Ctrl+Shift+R），即可看到效果。对文章进行进行的修改，通常也需强制刷新、清除浏览器缓存后才能看到效果。 后两步操作可合并、简写成一步，即 hexo g -d 备份源代码不要忘记将源文件也上传到github。在Git Bash中依次执行 git add . 添加文件到本地缓冲区 git commit –m “add branch” 确认修改并上传到本地版本控制库中。引号中的内容可任填，填入的内容会用作提交的commit message，显示在github code列表中文件名的右侧。 git push 推送到远程仓库。如此即可将源代码上传至hexo分支。 日常使用时，建议的执行顺序为先备份源代码，再部署。虽然一般不会出现什么问题，但万一突然断网甚至系统崩溃导致文件丢失，交换顺序可能就会使源码再也恢复不了啦。 已有博客的备份如果之前已经创建并上传好了博客，没有备份源码，但又突然想备份了，还是有救的。备份的操作与之前几乎相同，依然要创建分支。区别在于建立的分支中已经有内容了，此时的内容是部署的文件的一份拷贝，而非源码。 因此，clone之后，要将clone下来的文件中除.git文件夹以外的文件全部删掉，我们只需要.git中的信息。将原来写的博客的源文件整体复制到.git文件夹所在的目录，就算是改好了。 注意，复制过来的源文件中应该包含一个.gitignore文件，如果没有则需要手动创建，内容为 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 如果之前安装过主题，也应该将themes文件夹中对应主题目录下的.git文件夹删掉，防止主题文件上传不上去。这会导致主题的配置在其它设备上无法使用。 之后再按照上文中的步骤将源文件push到github上。这样，源文件就会覆盖掉分支中的文件，从而实现备份。 新设备上的操作安装过程与之前一样，只需省略初始化（init）的步骤即可。 配置好环境后，首先克隆仓库。在任意文件夹下打开Git Bash，输入 git clone git@github.com:xxxx/xxxx.github.io.git 注意，默认分支仍应为hexo。如已修改，需使用下列语句克隆对应分支： git clone -b hexo git@github.com:xxxx/xxxx.github.io.git 进入刚拷贝的xxxx.github.io文件夹，通过Git Bash依次执行 npm install hexo npm install npm install hexo-deployer-git 切记不要执行hexo init，否则之前写好的东西就都被丢弃了。 这样就在新的设备上也安装好了hexo。此后的修改配置部署操作就都如常了。注意要为新设备重新申请一个ssh密钥。请参考上文，自行操作。 当然，如果额外安装过hexo插件，就只能找个地方记住自己装了哪些东西，然后在新设备上再装一遍。否则可能出现在另一台设备上生成的博客缺少东西的情况。 注意，如果在其它设备修改过文件，在新设备上进行操作之前，一定记得要先使用下述指令 git pull 将本地仓库与远程仓库同步（拉取+合并）。否则可能出现版本冲突、无法push的情况，还要手动处理，造成不必要的麻烦。 总结发布新文章的步骤如下：在控制台输入 hexo n “文件名” 编辑完毕后，执行 hexo clean hexo g -d 若要备份源代码，只需 git add . git commit -m “xxx” git push 以上操作均可在控制台中完成，不必切换到Git Bash。 笔者为懒人提供了两个批处理脚本，这样就不必手打命令了。 “同步源文件到github.bat”： 123456set /p commit_log=请输入 commit 日志信息:git statusgit add .git commit -m "%commit_log%"git pushpause “发布文章到github.bat”： 12@echo offhexo clean&amp;&amp;hexo g&amp;&amp;hexo d]]></content>
      <categories>
        <category>其它技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
